{"version":3,"sources":["../../../src/effects/utils/index.ts"],"names":["fadeIn","sprite","duration","easing","Easing","interpolation","Interpolation","tween","Tween","props","fadeOut","pulse","minAlpha","slide","to","Point","blink","yoyo","playSfx","frequencyValue","attack","decay","type","volumeValue","panValue","wait","randomValue","sfx","Sound","randomInt"],"mappings":"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","sourcesContent":["import { DisplayObject } from \"DisplayObject\";\r\nimport { Point, randomInt } from \"inks2d/math\";\r\nimport { Easing, Interpolation, Tween } from \"inks2d/effects/tweens\";\r\nimport { Sound } from \"inks2d/effects/sfx\";\r\n\r\nexport const fadeIn = (\r\n\tsprite: DisplayObject,\r\n\tduration: number,\r\n\teasing = Easing.Linear.None,\r\n\tinterpolation = Interpolation.Linear,\r\n): Tween => {\r\n\tconst tween = new Tween();\r\n\ttween.onUpdate = (props) => {\r\n\t\tsprite.alpha = props.alpha;\r\n\t};\r\n\ttween\r\n\t\t.from({ alpha: sprite.alpha })\r\n\t\t.to({ alpha: 1 })\r\n\t\t.duration(duration)\r\n\t\t.easing(easing)\r\n\t\t.interpolation(interpolation)\r\n\t\t.start();\r\n\r\n\treturn tween;\r\n};\r\n\r\nexport const fadeOut = (\r\n\tsprite: DisplayObject,\r\n\tduration: number,\r\n\teasing = Easing.Linear.None,\r\n\tinterpolation = Interpolation.Linear,\r\n): Tween => {\r\n\tconst tween = new Tween();\r\n\ttween.onUpdate = (props) => {\r\n\t\tsprite.alpha = props.alpha;\r\n\t};\r\n\ttween\r\n\t\t.from({ alpha: sprite.alpha })\r\n\t\t.to({ alpha: 0 })\r\n\t\t.duration(duration)\r\n\t\t.easing(easing)\r\n\t\t.interpolation(interpolation)\r\n\t\t.start();\r\n\r\n\treturn tween;\r\n};\r\n\r\nexport const pulse = (\r\n\tsprite: DisplayObject,\r\n\tminAlpha: number,\r\n\tduration: number,\r\n\teasing = Easing.Linear.None,\r\n\tinterpolation = Interpolation.Linear,\r\n): Tween => {\r\n\tconst tween = new Tween();\r\n\ttween.onUpdate = (props) => {\r\n\t\tsprite.alpha = props.alpha;\r\n\t};\r\n\ttween\r\n\t\t.from({ alpha: sprite.alpha })\r\n\t\t.to({ alpha: minAlpha })\r\n\t\t.duration(duration)\r\n\t\t.yoyo(true)\r\n\t\t.easing(easing)\r\n\t\t.interpolation(interpolation)\r\n\t\t.start();\r\n\r\n\treturn tween;\r\n};\r\n\r\nexport const slide = (\r\n\tsprite: DisplayObject,\r\n\tto: Record<string, any>,\r\n\tduration: number,\r\n\teasing = Easing.Linear.None,\r\n\tinterpolation = Interpolation.Linear,\r\n): Tween => {\r\n\tconst tween = new Tween();\r\n\ttween.onUpdate = (props) => {\r\n\t\tsprite.position = new Point(props.x, props.y);\r\n\t};\r\n\ttween\r\n\t\t.from({ x: sprite.position.x, y: sprite.position.y })\r\n\t\t.to(to)\r\n\t\t.duration(duration)\r\n\t\t.easing(easing)\r\n\t\t.interpolation(interpolation)\r\n\t\t.start();\r\n\r\n\treturn tween;\r\n};\r\n\r\nexport const blink = (\r\n\tsprite: DisplayObject,\r\n\tduration: number,\r\n\tyoyo: boolean = true,\r\n\teasing = Easing.Linear.None,\r\n\tinterpolation = Interpolation.Linear,\r\n): Tween => {\r\n\tconst tween = new Tween();\r\n\ttween.onUpdate = (props) => {\r\n\t\tsprite.visible = !!Math.round(props.updateVisible);\r\n\t};\r\n\ttween\r\n\t\t.from({ updateVisible: 0 })\r\n\t\t.to({ updateVisible: 1 })\r\n\t\t.duration(duration)\r\n\t\t.yoyo(yoyo)\r\n\t\t.easing(easing)\r\n\t\t.interpolation(interpolation)\r\n\t\t.start();\r\n\r\n\treturn tween;\r\n};\r\n\r\nexport const playSfx = (\r\n\tfrequencyValue: number,\r\n\tattack: number = 0,\r\n\tdecay: number = 1,\r\n\ttype: \"sine\" | \"triangle\" | \"square\" | \"sawtooth\" = \"sine\",\r\n\tvolumeValue: number = 1,\r\n\tpanValue: number = 1,\r\n\twait: number = 0,\r\n\t// pitchBendAmount: number = 0,\r\n\t// reverse: boolean = false,\r\n\trandomValue: number = 0,\r\n\t// dissonance: number = 0,\r\n\t// echo: number[] | undefined = undefined,\r\n\t// reverb: number[] | undefined = undefined,\r\n): void => {\r\n\tconst sfx = new Sound(\"\");\r\n\r\n\tsfx.oscillatorNode.connect(sfx.volumeNode);\r\n\tsfx.volumeNode.connect(sfx.panNode);\r\n\tsfx.panNode.connect(sfx.audioContextDestination);\r\n\r\n\tsfx.volume = volumeValue;\r\n\tsfx.pan = panValue;\r\n\tsfx.oscillatorNode.type = type;\r\n\r\n\tif (randomValue > 0) {\r\n\t\tfrequencyValue = randomInt(\r\n\t\t\tfrequencyValue - randomValue / 2,\r\n\t\t\tfrequencyValue + randomValue / 2,\r\n\t\t);\r\n\t}\r\n\r\n\tsfx.oscillatorNode.frequency.value = frequencyValue;\r\n\r\n\tif (attack > 0) sfx.fadeIn(sfx.volume, wait);\r\n\tif (decay > 0) sfx.fadeOut(sfx.volume, wait);\r\n\r\n\tsfx.oscillatorNode.start(wait);\r\n\r\n\t/*\r\n\tconst oscillator = this._actx.createOscillator();\r\n\r\n\toscillator.connect(this._volumeNode);\r\n\tthis._volumeNode.connect(this._panNode);\r\n\tthis._panNode.connect(this._actx.destination);\r\n\r\n\r\n\toscillator.start(this._actx.currentTime + wait);\r\n\t*/\r\n\t// snd.playSfx(frequencyValue, type, wait, randomValue);\r\n};\r\n"]}