{"version":3,"sources":["../src/geom/Circle.ts","../src/geom/Line.ts","../src/geom/Rectangle.ts","../src/geom/Triangle.ts"],"names":["Circle","DisplayObject","width","height","fillStyle","strokeStyle","lineWidth","value","ctx","Line","a","Point","b","yDelta","xDelta","Rectangle","radius","x","y","r","Triangle","inclination","position","vec","Vector2D"],"mappings":"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","sourcesContent":["import { DisplayObject } from \"DisplayObject\";\n\nexport class Circle extends DisplayObject {\n\tpublic startAngle: number = 0;\n\tpublic endAngle: number = 2 * Math.PI;\n\tpublic isPie: boolean = false;\n\n\tconstructor(\n\t\twidth: number = 32,\n\t\theight: number = 32,\n\t\tfillStyle: string = \"gray\",\n\t\tstrokeStyle: string = \"none\",\n\t\tlineWidth: number = 0,\n\t) {\n\t\tsuper();\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.fillStyle = fillStyle;\n\t\tthis.strokeStyle = strokeStyle;\n\t\tthis.lineWidth = lineWidth;\n\n\t\tthis.name = \"Circle\";\n\t}\n\n\tget diameter(): number {\n\t\treturn this.width;\n\t}\n\n\tset diameter(value: number) {\n\t\tthis.width = value;\n\t\tthis.height = value;\n\t}\n\n\tget radius(): number {\n\t\treturn this.halfWidth;\n\t}\n\n\tset radius(value: number) {\n\t\tthis.width = value * 2;\n\t\tthis.height = value * 2;\n\t}\n\n\trender(ctx: CanvasRenderingContext2D): void {\n\t\tctx.strokeStyle = this.strokeStyle;\n\t\tctx.lineWidth = this.lineWidth;\n\t\tctx.fillStyle = this.fillStyle;\n\t\tctx.beginPath();\n\n\t\tif (this.isPie) {\n\t\t\tctx.moveTo(\n\t\t\t\tthis.radius + -this.diameter * this.pivot.x,\n\t\t\t\tthis.radius + -this.diameter * this.pivot.y,\n\t\t\t);\n\t\t}\n\n\t\tctx.arc(\n\t\t\tthis.radius + -this.diameter * this.pivot.x,\n\t\t\tthis.radius + -this.diameter * this.pivot.y,\n\t\t\tthis.radius,\n\t\t\tthis.startAngle,\n\t\t\tthis.endAngle,\n\t\t\tfalse,\n\t\t);\n\n\t\tif (this.strokeStyle !== \"none\") ctx.stroke();\n\t\tif (this.fillStyle !== \"none\") ctx.fill();\n\t\tif (this.mask && this.mask) ctx.clip();\n\t}\n}\n","import { DisplayObject } from \"DisplayObject\";\nimport { Point } from \"inks2d/math\";\n\nexport class Line extends DisplayObject {\n\tpublic a: Point;\n\tpublic b: Point;\n\tpublic lineJoin: \"round\" | \"bevel\" | \"miter\" = \"round\";\n\tpublic lineCap: \"butt\" | \"round\" | \"square\" = \"butt\";\n\n\tconstructor(\n\t\ta: Point = new Point(0, 0),\n\t\tb: Point = new Point(32, 32),\n\t\tstrokeStyle: string = \"gray\",\n\t\tlineWidth: number = 0,\n\t) {\n\t\tsuper();\n\n\t\tthis.strokeStyle = strokeStyle;\n\t\tthis.lineWidth = lineWidth;\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t}\n\n\tget slope(): number {\n\t\tconst yDelta = this.b.y - this.a.y;\n\t\tconst xDelta = this.b.x - this.a.x || 1;\n\t\treturn yDelta / xDelta;\n\t}\n\n\tget yIntercepts(): number {\n\t\treturn this.slope * this.b.x * -1 + this.b.y;\n\t}\n\n\trender(ctx: CanvasRenderingContext2D): void {\n\t\tctx.strokeStyle = this.strokeStyle;\n\t\tctx.lineWidth = this.lineWidth;\n\t\tctx.lineJoin = this.lineJoin;\n\t\tctx.lineCap = this.lineCap;\n\t\tctx.beginPath();\n\t\tctx.moveTo(this.a.x, this.a.y);\n\t\tctx.lineTo(this.b.x, this.b.y);\n\t\tif (this.strokeStyle !== \"none\") ctx.stroke();\n\t}\n}\n","import { DisplayObject } from \"DisplayObject\";\n\nexport class Rectangle extends DisplayObject {\n\tconstructor(\n\t\twidth: number = 32,\n\t\theight: number = 32,\n\t\tfillStyle: string = \"gray\",\n\t\tstrokeStyle: string = \"none\",\n\t\tlineWidth: number = 0,\n\t\tradius: number = 0,\n\t) {\n\t\tsuper();\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.fillStyle = fillStyle;\n\t\tthis.strokeStyle = strokeStyle;\n\t\tthis.lineWidth = lineWidth;\n\n\t\tthis.customProperties.corners = {\n\t\t\ttopLeft: radius,\n\t\t\ttopRight: radius,\n\t\t\tbottomLeft: radius,\n\t\t\tbottomRight: radius,\n\t\t};\n\t}\n\n\trender(ctx: CanvasRenderingContext2D): void {\n\t\tconst x = -this.width * this.pivot.x;\n\t\tconst y = -this.height * this.pivot.y;\n\t\tconst r = x + this.width;\n\t\tconst b = y + this.height;\n\n\t\tctx.strokeStyle = this.strokeStyle;\n\t\tctx.lineWidth = this.lineWidth;\n\t\tctx.fillStyle = this.fillStyle;\n\t\tctx.beginPath();\n\t\tctx.moveTo(x, y);\n\n\t\tctx.lineTo(r - this.customProperties.corners.topRight, y);\n\t\tctx.quadraticCurveTo(\n\t\t\tr,\n\t\t\ty,\n\t\t\tr,\n\t\t\ty + (this.customProperties.corners.topRight as number),\n\t\t);\n\n\t\tctx.lineTo(r, y + this.height - this.customProperties.corners.bottomRight);\n\t\tctx.quadraticCurveTo(\n\t\t\tr,\n\t\t\tb,\n\t\t\tr - this.customProperties.corners.bottomRight,\n\t\t\tb,\n\t\t);\n\n\t\tctx.lineTo(x + (this.customProperties.corners.bottomLeft as number), b);\n\t\tctx.quadraticCurveTo(x, b, x, b - this.customProperties.corners.bottomLeft);\n\n\t\tctx.lineTo(x, y + (this.customProperties.corners.topLeft as number));\n\t\tctx.quadraticCurveTo(\n\t\t\tx,\n\t\t\ty,\n\t\t\tx + (this.customProperties.corners.topLeft as number),\n\t\t\ty,\n\t\t);\n\n\t\tif (this.strokeStyle !== \"none\") ctx.stroke();\n\t\tif (this.fillStyle !== \"none\") ctx.fill();\n\t\tif (this.mask && this.mask) ctx.clip();\n\t}\n}\n","import { DisplayObject } from \"DisplayObject\";\nimport { Point, Vector2D } from \"inks2d/math\";\n\nexport class Triangle extends DisplayObject {\n\tprivate readonly _inclination: \"right\" | \"left\" = \"right\";\n\tconstructor(\n\t\twidth: number = 30,\n\t\theight: number = 30,\n\t\tinclination: \"right\" | \"left\" = \"right\",\n\t\tfillStyle: string = \"gray\",\n\t\tstrokeStyle: string = \"none\",\n\t\tlineWidth: number = 0,\n\t\tposition: Point = new Point(0, 0),\n\t) {\n\t\tsuper();\n\n\t\tthis._inclination = inclination;\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.position = new Point(position.x, position.y);\n\n\t\tthis.fillStyle = fillStyle;\n\t\tthis.strokeStyle = strokeStyle;\n\t\tthis.lineWidth = lineWidth;\n\t}\n\n\tget inclination(): \"right\" | \"left\" {\n\t\treturn this._inclination;\n\t}\n\n\tget hypotenuse(): Vector2D {\n\t\tconst vec = new Vector2D();\n\n\t\tvec.a.x = this.position.x - this.width * this.pivot.x;\n\t\tvec.a.y = this.position.y - this.height * this.pivot.y;\n\n\t\tvec.b.x = this.position.x - this.width * this.pivot.x + this.width;\n\t\tvec.b.y = this.position.y - this.height * this.pivot.y + this.height;\n\n\t\tif (this._inclination === \"left\") {\n\t\t\tvec.a.x = this.position.x - this.width * this.pivot.x;\n\t\t\tvec.a.y = this.position.y - this.height * this.pivot.y + this.height;\n\n\t\t\tvec.b.x = this.position.x - this.width * this.pivot.x + this.width;\n\t\t\tvec.b.y = this.position.y - this.height * this.pivot.y;\n\t\t}\n\n\t\treturn vec;\n\t}\n\n\trender(ctx: CanvasRenderingContext2D): void {\n\t\tctx.strokeStyle = this.strokeStyle;\n\t\tctx.lineWidth = this.lineWidth;\n\t\tctx.fillStyle = this.fillStyle;\n\n\t\tconst x = -(this.width * this.pivot.x);\n\t\tconst y = -(this.height * this.pivot.y);\n\n\t\tctx.beginPath();\n\t\tif (this._inclination === \"right\") {\n\t\t\tctx.moveTo(x, y);\n\t\t\tctx.lineTo(x, y + this.height);\n\t\t\tctx.lineTo(x + this.width, y + this.height);\n\t\t\tctx.lineTo(x, y);\n\t\t} else {\n\t\t\tctx.moveTo(x + this.width, y);\n\t\t\tctx.lineTo(x, y + this.height);\n\t\t\tctx.lineTo(x + this.width, y + this.height);\n\t\t\tctx.lineTo(x + this.width, y);\n\t\t}\n\n\t\tif (this.strokeStyle !== \"none\") ctx.stroke();\n\t\tif (this.fillStyle !== \"none\") ctx.fill();\n\t\tif (this.mask && this.mask) ctx.clip();\n\t}\n}\n"]}