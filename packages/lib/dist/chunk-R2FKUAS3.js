import { c } from './chunk-JXTEU5XG.js';

var l=class{_name;_actx=new AudioContext;_volumeNode=this._actx.createGain();_panNode=this._actx.createStereoPanner();_delayNode=this._actx.createDelay();_feedbackNode=this._actx.createGain();_filterNode=this._actx.createBiquadFilter();_convolverNode=this._actx.createConvolver();_oscillatorNode=this._actx.createOscillator();_buffer=null;_reverbImpulse=null;_startTime=0;_startOffset=0;_soundNode=null;_echo=!1;_delayValue=.3;_feedbackValue=.3;_filterValue=0;_loop=!1;_playing=!1;_volumeValue=1;reverb=!1;playbackRate=1;constructor(e){this._name=e;}get name(){return this._name}async load(){return await new Promise(e=>{fetch(this._name).then(t=>{t.arrayBuffer().then(o=>{this._actx.decodeAudioData(o,i=>{this._buffer=i,e(!0);},i=>{throw new Error(`Audio could not be decoded: ${JSON.stringify(i)}`)});});});})}play(){if(this._buffer==null)throw new Error("Audio not loaded.");this._startTime=this._actx.currentTime,this._soundNode=this._actx.createBufferSource(),this._soundNode.buffer=this._buffer,this._soundNode.connect(this._volumeNode),this._volumeNode.connect(this._panNode),this.reverb?(this._volumeNode.connect(this._convolverNode),this._convolverNode.connect(this._panNode),this._convolverNode.buffer=this._reverbImpulse):this._volumeNode.connect(this._panNode),this._panNode.connect(this._actx.destination),this._echo&&(this._feedbackNode.gain.value=this._feedbackValue,this._delayNode.delayTime.value=this._delayValue,this._filterNode.frequency.value=this._filterValue,this._delayNode.connect(this._feedbackNode),this._filterValue>0?(this._feedbackNode.connect(this._filterNode),this._filterNode.connect(this._delayNode)):this._feedbackNode.connect(this._delayNode),this._volumeNode.connect(this._delayNode),this._delayNode.connect(this._panNode)),this._soundNode.loop=this._loop,this._soundNode.playbackRate.value=this.playbackRate,this._soundNode.start(this._startTime,this._startOffset%this._buffer.duration),this._playing=!0;}pause(){this._playing&&(this._soundNode?.stop(this._actx.currentTime),this._startOffset+=this._actx.currentTime-this._startTime,this._playing=!1);}stop(){this._soundNode?.stop(this._actx.currentTime),this._playing=!1;}restart(){this._playing&&this._soundNode?.stop(this._actx.currentTime),this._startOffset=0,this.play();}playFrom(e){this._playing&&this._soundNode?.stop(this._actx.currentTime),this._startOffset=e,this.play();}setEcho(e=.3,t=.3,o=0){this._delayValue=e,this._feedbackValue=t,this._filterValue=o,this._echo=!0;}setReverb(e=2,t=2,o=!1){this._reverbImpulse=this.impulseResponse(e,t,o),this.reverb=!0;}fadeIn(e,t=0){this.volume=0,this.volumeNode.gain.linearRampToValueAtTime(0,this._actx.currentTime+t),this.volumeNode.gain.linearRampToValueAtTime(this.volume,this._actx.currentTime+t+e);}fadeOut(e,t=0){this.volumeNode.gain.linearRampToValueAtTime(this.volume,this._actx.currentTime+t),this.volumeNode.gain.linearRampToValueAtTime(0,this._actx.currentTime+t+e);}impulseResponse(e=2,t=2,o=!1){let i=this._actx.sampleRate*e,a=this._actx.createBuffer(2,i,this._actx.sampleRate),u=a.getChannelData(0),d=a.getChannelData(1);for(let r=0;r<i;r++){let n;o?n=i-r:n=r,u[r]=(Math.random()*2-1)*Math.pow(1-n/i,t),d[r]=(Math.random()*2-1)*Math.pow(1-n/i,t);}return a}get loop(){return this._loop}set loop(e){this._loop=e;}get volume(){return this._volumeValue}set volume(e){this._volumeNode.gain.value=e;}get pan(){return this._panNode.pan.value}set pan(e){this._panNode.pan.value=e;}get playing(){return this._playing}get oscillatorNode(){return this._oscillatorNode}get volumeNode(){return this._volumeNode}get panNode(){return this._panNode}get audioContextDestination(){return this._actx.destination}playSfx(e,t="sine",o=0,i=0){let a=this._actx.createOscillator();a.connect(this._volumeNode),this._volumeNode.connect(this._panNode),this._panNode.connect(this._actx.destination),a.type=t,i>0&&(e=c(e-i/2,e+i/2)),a.frequency.value=e,a.start(this._actx.currentTime+o);}};

export { l as a };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=chunk-R2FKUAS3.js.map