{"version":3,"sources":["../src/text/Text.ts"],"names":["Text","DisplayObject","content","size","color","value","ctx","vAlign","h","i","lText","newWidth"],"mappings":"wCAEO,IAAMA,EAAN,cAAmBC,CAAc,CAC/B,MAED,OAAiB,UACjB,OAAiB,SACjB,MAAgB,SAChB,MAGH,CAAE,EAAG,SAAU,EAAG,QAAS,EAExB,QACA,MACA,QAAkB,EAEzB,YACCC,EAAkB,UAClBC,EAAe,GACfC,EAAgB,MACf,CACD,MAAM,EAEN,KAAK,MAAQ,GAAGD,MAChB,KAAK,QAAUD,EACf,KAAK,MAAQE,CACd,CAEQ,eAAwB,CAC/B,MAAO,GAAG,KAAK,SAAS,KAAK,UAAU,KAAK,SAAS,KAAK,QAC3D,CAEA,IAAI,MAAe,CAClB,OAAO,SAAS,KAAK,KAAK,CAC3B,CAEA,IAAI,KAAKC,EAAe,CACvB,KAAK,MAAQ,GAAGA,KACjB,CAEA,OAAOC,EAAqC,CAC3C,IAAMC,EAAS,KAAK,MAAM,IAAM,SAAW,SAAW,KAAK,MAAM,EAEjED,EAAI,KAAO,KAAK,cAAc,EAC9BA,EAAI,YAAc,KAAK,YACvBA,EAAI,UAAY,KAAK,UACrBA,EAAI,UAAY,KAAK,MACrBA,EAAI,aAAeC,EACnBD,EAAI,UAAY,KAAK,MAAM,EAE3B,KAAK,QAAU,GAAG,KAAK,UACvB,IAAMJ,EAAU,KAAK,QAAQ,MAAM;AAAA,CAAI,EACjCM,EAAI,KAAK,MAAMF,EAAI,YAAY,GAAG,EAAE,KAAK,EAE/C,KAAK,QAAU,KAAK,SAAWJ,EAAQ,OAAS,GAEhDI,EAAI,KAAK,EACTA,EAAI,UACH,CAAC,KAAK,MAAQ,KAAK,MAAM,EAAI,KAAK,MAAQ,EAC1C,CAAC,KAAK,OAAS,KAAK,MAAM,EAAIE,EAAI,CACnC,EAEA,KAAK,OAAS,EACd,QAASC,EAAI,EAAGA,EAAIP,EAAQ,OAAQO,IAAK,CACxC,IAAMC,EAAQR,EAAQO,CAAC,EACjBE,EAAW,KAAK,MAAML,EAAI,YAAYI,CAAK,EAAE,KAAK,EAEpDC,EAAW,KAAK,QACnB,KAAK,MAAQA,GAGd,KAAK,QAAUH,EAAI,KAAK,QAExBF,EAAI,SAASI,EAAO,EAAGD,GAAKD,EAAI,KAAK,QAAQ,EAEzC,KAAK,YAAc,GACtBF,EAAI,WAAWI,EAAO,EAAGD,GAAKD,EAAI,KAAK,QAAQ,EAEjD,KAAK,QAAU,KAAK,QAEpBF,EAAI,QAAQ,CACb,CACD","sourcesContent":["import { DisplayObject } from \"DisplayObject\";\n\nexport class Text extends DisplayObject {\n\tprivate _size: string;\n\n\tpublic family: string = \"verdana\";\n\tpublic weight: string = \"normal\";\n\tpublic style: string = \"normal\";\n\tpublic align: {\n\t\tv: \"top\" | \"bottom\" | \"center\";\n\t\th: \"left\" | \"right\" | \"center\";\n\t} = { v: \"center\", h: \"center\" };\n\n\tpublic content: string;\n\tpublic color: string;\n\tpublic leading: number = 0;\n\n\tconstructor(\n\t\tcontent: string = \"Inks2D!\",\n\t\tsize: number = 16,\n\t\tcolor: string = \"red\",\n\t) {\n\t\tsuper();\n\n\t\tthis._size = `${size}px`;\n\t\tthis.content = content;\n\t\tthis.color = color;\n\t}\n\n\tprivate getProperties(): string {\n\t\treturn `${this.style} ${this.weight} ${this._size} ${this.family}`;\n\t}\n\n\tget size(): number {\n\t\treturn parseInt(this._size);\n\t}\n\n\tset size(value: number) {\n\t\tthis._size = `${value}px`;\n\t}\n\n\trender(ctx: CanvasRenderingContext2D): void {\n\t\tconst vAlign = this.align.v === \"center\" ? \"middle\" : this.align.v;\n\n\t\tctx.font = this.getProperties();\n\t\tctx.strokeStyle = this.strokeStyle;\n\t\tctx.lineWidth = this.lineWidth;\n\t\tctx.fillStyle = this.color;\n\t\tctx.textBaseline = vAlign;\n\t\tctx.textAlign = this.align.h;\n\n\t\tthis.content = `${this.content}`;\n\t\tconst content = this.content.split(\"\\n\");\n\t\tconst h = Math.floor(ctx.measureText(\"M\").width);\n\n\t\tthis.height += this.leading * (content.length - 1);\n\n\t\tctx.save();\n\t\tctx.translate(\n\t\t\t-this.width * this.pivot.x + this.width / 2,\n\t\t\t-this.height * this.pivot.y + h / 2,\n\t\t);\n\n\t\tthis.height = 0;\n\t\tfor (let i = 0; i < content.length; i++) {\n\t\t\tconst lText = content[i];\n\t\t\tconst newWidth = Math.floor(ctx.measureText(lText).width);\n\n\t\t\tif (newWidth > this.width) {\n\t\t\t\tthis.width = newWidth;\n\t\t\t}\n\n\t\t\tthis.height += h + this.leading;\n\n\t\t\tctx.fillText(lText, 0, i * (h + this.leading));\n\n\t\t\tif (this.lineWidth !== 0)\n\t\t\t\tctx.strokeText(lText, 0, i * (h + this.leading));\n\t\t}\n\t\tthis.height -= this.leading;\n\n\t\tctx.restore();\n\t}\n}\n"]}