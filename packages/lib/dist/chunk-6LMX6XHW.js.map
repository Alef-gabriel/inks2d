{"version":3,"sources":["../src/EngineConstants.ts","../src/DisplayObject.ts"],"names":["EC_DRAGGABLE_SPRITES","EC_BUTTONS","EC_PARTICLES","EC_SHAKING_SPRITES","EC_EMITTERS","EC_TWEENS","DisplayObject","Point","value","a","b","child","sprite","spriteLayer","btnId","dragId","particleId","shakeId","xOffset","yOffset","child1","child2","index1","index2","spritesToAdd","spritesToRemove"],"mappings":"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","sourcesContent":["import { type Tween } from \"tweens/Tween\";\nimport { type DisplayObject } from \"./DisplayObject\";\nimport { type Emitter } from \"./effects/particles/Emitter\";\n\nexport const EC_DRAGGABLE_SPRITES: DisplayObject[] = [];\nexport const EC_BUTTONS: DisplayObject[] = [];\nexport const EC_PARTICLES: DisplayObject[] = [];\nexport const EC_SHAKING_SPRITES: DisplayObject[] = [];\nexport const EC_EMITTERS: Emitter[] = [];\nexport const EC_TWEENS: Tween[] = [];\n","import {\n\tEC_BUTTONS,\n\tEC_DRAGGABLE_SPRITES,\n\tEC_PARTICLES,\n\tEC_SHAKING_SPRITES,\n} from \"./EngineConstants\";\nimport { Point } from \"./math\";\n\ninterface Bounds {\n\tx: number;\n\ty: number;\n\twidth: number;\n\theight: number;\n}\n\n/**\n *\n * The DisplayObject class is the base class for all objects that can be placed on the display list. The display list manages all objects displayed in the Inks2D game engine. Display objects can have child display objects.\n *\n * The DisplayObject class itself does not include any APIs for rendering content onscreen. For that reason, if you want create a custom subclass of the DisplayObject class, you will want to extend one of its subclasses that do have APIs for rendering content onscreen, such as the Sprite, Spritemap, Button, etc.\n *\n * \\> ⚠️ DisplayObject is an abstract base class; therefore, you cannot call DisplayObject directly.\n * All display objects inherit from the DisplayObject class.\n *\n * @category inks2d\n */\nexport abstract class DisplayObject {\n\tprivate _layer: number = 0;\n\tprivate _draggable: boolean = false;\n\tprivate _visible: boolean = true;\n\tprivate _rotation: number = 0;\n\tprivate readonly _children: DisplayObject[] = [];\n\n\t/**\n\t * The x and y positions of the display object in the Stage.\n\t */\n\tpublic position: Point = new Point(0, 0);\n\n\t/**\n\t * Helper property. Can be used to set the display object velocity.\n\t */\n\tpublic velocity: Point = new Point(0, 0);\n\n\t/**\n\t * Helper property. Can be used to set the display object acceleration.\n\t */\n\tpublic acceleration: Point = new Point(0, 0);\n\n\t/**\n\t * Helper property. Can be used to set the display object friction.\n\t */\n\tpublic friction: Point = new Point(0.96, 0.96);\n\n\t/**\n\t * Helper property. Can be used to set the display object gravity.\n\t */\n\tpublic gravity: Point = new Point(0, 0);\n\n\t/**\n\t * Width of the display object.\n\t */\n\tpublic width: number = 0;\n\n\t/**\n\t * Height of the display object.\n\t */\n\tpublic height: number = 0;\n\n\t/**\n\t * The display object bounds.\n\t */\n\tpublic bounds: Bounds = {\n\t\tx: 0,\n\t\ty: 0,\n\t\twidth: 0,\n\t\theight: 0,\n\t};\n\n\t/**\n\t * Sets the DisplayObject object name.\n\t */\n\tpublic name: string = \"\";\n\n\t/**\n\t * Helper property. Sets the display object mass.\n\t */\n\tpublic mass: number = 1;\n\n\t/**\n\t * Indicates the alpha transparency value of the display object.\n\t */\n\tpublic alpha: number = 1;\n\n\t/**\n\t * Sets if the display object would be rendered outside the viewport.\n\t */\n\tpublic renderOutside: boolean = false;\n\n\t/**\n\t * Indicates the horizontal/vertical scale of the display object.\n\t */\n\tpublic scale: Point = new Point(1, 1);\n\n\t/**\n\t * Sets if the display object can be vertically draggable.\n\t */\n\tpublic allowVerticalDrag: boolean = true;\n\n\t/**\n\t * Sets if the display object can be horizontally draggable.\n\t */\n\tpublic allowHorizontalDrag: boolean = true;\n\n\t/**\n\t * Defines if the display object can be draggable.\n\t */\n\tpublic allowFocusDrag: boolean = true;\n\n\t/**\n\t * Sets the pivot of the display object.\n\t */\n\tpublic pivot: Point = new Point(0.5, 0.5);\n\n\t/**\n\t * The display object that contains this display object.\n\t */\n\tpublic parent?: DisplayObject;\n\n\t/**\n\t * Enables/Disables display object's shadow.\n\t */\n\tpublic shadow: boolean = false;\n\n\tpublic shadowColor: string = \"rgba(100, 100, 100, 0.5)\";\n\tpublic shadowOffsetX: number = 3;\n\tpublic shadowOffsetY: number = 3;\n\tpublic shadowBlur: number = 3;\n\tpublic isOnViewport: boolean = true;\n\n\tpublic blendMode: GlobalCompositeOperation = \"source-over\";\n\tpublic filter: string = \"none\";\n\n\tpublic frames: any[] = [];\n\tpublic loop: boolean = true;\n\n\tpublic fillStyle: string = \"gray\";\n\tpublic strokeStyle: string = \"none\";\n\tpublic lineWidth: number = 0;\n\tpublic mask: boolean = false;\n\n\tpublic customProperties: Record<string, any> = {};\n\n\t/***/\n\tget rotation(): number {\n\t\treturn this._rotation;\n\t}\n\n\t/**\n\t * Indicates the rotation of the display object, in radians, from its original orientation.\n\t */\n\tset rotation(value: number) {\n\t\tthis._rotation = value % (Math.PI * 2);\n\t}\n\n\t/**\n\t * The X global position.\n\t */\n\tget gx(): number {\n\t\tif (this.parent != null) return this.position.x + this.parent.gx;\n\t\treturn this.position.x;\n\t}\n\n\t/**\n\t * The Y global position.\n\t */\n\tget gy(): number {\n\t\tif (this.parent != null) return this.position.y + this.parent.gy;\n\t\treturn this.position.y;\n\t}\n\n\t/** */\n\tget layer(): number {\n\t\treturn this._layer;\n\t}\n\n\t/**\n\t * The rendering layer of this display object.\n\t */\n\tset layer(value: number) {\n\t\tthis._layer = value;\n\n\t\tif (this.parent != null) {\n\t\t\tthis.parent.children.sort((a, b) => {\n\t\t\t\treturn a.layer - b.layer;\n\t\t\t});\n\t\t}\n\t}\n\n\t/** */\n\tget visible(): boolean {\n\t\tif (this.parent != null && !this.parent.visible) return false;\n\t\treturn this._visible;\n\t}\n\n\t/**\n\t * If the display object should render.\n\t */\n\tset visible(value: boolean) {\n\t\tthis._visible = value;\n\t}\n\n\t/**\n\t * The children of this display object.\n\t */\n\tget children(): DisplayObject[] {\n\t\treturn this._children;\n\t}\n\n\t/**\n\t * Half the display object's width.\n\t *\n\t * @readonly\n\t */\n\tget halfWidth(): number {\n\t\treturn this.width / 2;\n\t}\n\n\t/**\n\t * Half the display object's height.\n\t *\n\t * @readonly\n\t */\n\tget halfHeight(): number {\n\t\treturn this.height / 2;\n\t}\n\n\t/**\n\t * The center x position of the display object.\n\t *\n\t * Same as {@link localCenterX}.\n\t */\n\tget centerX(): number {\n\t\treturn this.localCenterX;\n\t}\n\n\t/**\n\t * The center y position of the display object.\n\t *\n\t * Same as {@link localCenterY}.\n\t */\n\tget centerY(): number {\n\t\treturn this.localCenterY;\n\t}\n\n\t/**\n\t * The local center x position of the display object.\n\t *\n\t * Same as {@link centerX}.\n\t */\n\tget localCenterX(): number {\n\t\treturn (\n\t\t\tthis.position.x -\n\t\t\tthis.width * this.pivot.x +\n\t\t\tthis.bounds.x +\n\t\t\tthis.bounds.width / 2\n\t\t);\n\t}\n\n\t/**\n\t * The local center y position of the display object.\n\t *\n\t * Same as {@link centerY}.\n\t */\n\tget localCenterY(): number {\n\t\treturn (\n\t\t\tthis.position.y -\n\t\t\tthis.height * this.pivot.y +\n\t\t\tthis.bounds.y +\n\t\t\tthis.bounds.height / 2\n\t\t);\n\t}\n\n\t/**\n\t * The global center x position of the display object.\n\t */\n\tget globalCenterX(): number {\n\t\treturn (\n\t\t\tthis.gx -\n\t\t\tthis.width * this.pivot.x +\n\t\t\tthis.bounds.x +\n\t\t\tthis.bounds.width / 2\n\t\t);\n\t}\n\n\t/**\n\t * The global center y position of the display object.\n\t */\n\tget globalCenterY(): number {\n\t\treturn (\n\t\t\tthis.gy -\n\t\t\tthis.height * this.pivot.y +\n\t\t\tthis.bounds.y +\n\t\t\tthis.bounds.height / 2\n\t\t);\n\t}\n\n\t/**\n\t * Gets the display object's local bounds properties.\n\t *\n\t * @returns Bounds\n\t */\n\tlocalBounds(): Bounds {\n\t\treturn {\n\t\t\tx: this.position.x + this.bounds.x,\n\t\t\ty: this.position.y + this.bounds.y,\n\t\t\twidth: this.bounds.width,\n\t\t\theight: this.bounds.height,\n\t\t};\n\t}\n\n\t/**\n\t * Gets the display object's global bounds properties.\n\t *\n\t * @returns Bounds\n\t */\n\tglobalBounds(): Bounds {\n\t\treturn {\n\t\t\tx: this.gx + this.bounds.x,\n\t\t\ty: this.gy + this.bounds.y,\n\t\t\twidth: this.bounds.width,\n\t\t\theight: this.bounds.height,\n\t\t};\n\t}\n\n\tget empty(): boolean {\n\t\tif (this.children.length === 0) return true;\n\t\treturn false;\n\t}\n\n\tget draggable(): boolean {\n\t\treturn this._draggable;\n\t}\n\n\tset draggable(value: boolean) {\n\t\tif (value) {\n\t\t\tEC_DRAGGABLE_SPRITES.push(this);\n\t\t\tthis._draggable = true;\n\t\t\treturn;\n\t\t}\n\n\t\tEC_DRAGGABLE_SPRITES.splice(EC_DRAGGABLE_SPRITES.indexOf(this), 1);\n\t}\n\n\tadded(): void {}\n\tupdate(): void {}\n\tdestroy(): void {\n\t\tfor (let i = this.children.length - 1; i >= 0; i--) {\n\t\t\tconst child = this.children[i];\n\t\t\tthis.removeChild(child);\n\t\t}\n\t}\n\n\tmove(): void {\n\t\tthis.velocity = this.velocity.add(this.acceleration);\n\n\t\tthis.velocity.x *= this.friction.x;\n\t\tthis.velocity.y *= this.friction.y;\n\n\t\tif (Math.abs(this.velocity.x) < 0.05 && Math.abs(this.velocity.y) < 0.05) {\n\t\t\tthis.acceleration.x = 0;\n\t\t\tthis.acceleration.y = 0;\n\t\t}\n\n\t\tthis.velocity = this.velocity.add(this.gravity);\n\t\tthis.position = this.position.add(this.velocity);\n\t}\n\n\taddChild(sprite: DisplayObject): void {\n\t\tif (sprite.parent != null) {\n\t\t\tsprite.parent.remove(sprite);\n\t\t}\n\n\t\tsprite.parent = this;\n\n\t\tif (sprite.bounds.width === 0) sprite.bounds.width = sprite.width;\n\t\tif (sprite.bounds.height === 0) sprite.bounds.height = sprite.height;\n\n\t\tthis.children.push(sprite);\n\n\t\tsprite.added();\n\n\t\tconst spriteLayer = sprite.layer;\n\t\tif (spriteLayer !== 0) sprite.layer = spriteLayer;\n\t}\n\n\tremoveChild(sprite: DisplayObject): boolean {\n\t\tif (sprite.parent === this) {\n\t\t\tconst btnId = EC_BUTTONS.indexOf(sprite);\n\t\t\tconst dragId = EC_DRAGGABLE_SPRITES.indexOf(sprite);\n\t\t\tconst particleId = EC_PARTICLES.indexOf(sprite);\n\t\t\tconst shakeId = EC_SHAKING_SPRITES.indexOf(sprite);\n\n\t\t\tthis.children.splice(this.children.indexOf(sprite), 1);\n\n\t\t\tif (btnId !== -1) EC_BUTTONS.splice(btnId, 1);\n\n\t\t\tif (dragId !== -1) EC_DRAGGABLE_SPRITES.splice(dragId, 1);\n\n\t\t\tif (particleId !== -1) EC_PARTICLES.splice(particleId, 1);\n\n\t\t\tif (shakeId !== -1) EC_SHAKING_SPRITES.splice(shakeId, 1);\n\n\t\t\tsprite.destroy();\n\n\t\t\tsprite.parent = undefined;\n\n\t\t\treturn true;\n\t\t}\n\n\t\tthrow new Error(\n\t\t\t`${JSON.stringify(sprite)} is not a child of ${JSON.stringify(this)}`,\n\t\t);\n\t}\n\n\tputTop(sprite: DisplayObject, xOffset = 0, yOffset = 0): void {\n\t\tyOffset *= -1;\n\t\tsprite.position.x =\n\t\t\tthis.position.x + this.halfWidth - sprite.halfWidth + xOffset;\n\t\tsprite.position.y = this.position.y - sprite.height + yOffset;\n\t}\n\n\tputRight(sprite: DisplayObject, xOffset = 0, yOffset = 0): void {\n\t\tsprite.position.x = this.position.x + this.width + xOffset;\n\t\tsprite.position.y =\n\t\t\tthis.position.y + this.halfHeight - sprite.halfHeight + yOffset;\n\t}\n\n\tputBottom(sprite: DisplayObject, xOffset = 0, yOffset = 0): void {\n\t\tsprite.position.x =\n\t\t\tthis.position.x + this.halfWidth - sprite.halfWidth + xOffset;\n\t\tsprite.position.y = this.position.y + this.height + yOffset;\n\t}\n\n\tputLeft(sprite: DisplayObject, xOffset = 0, yOffset = 0): void {\n\t\txOffset *= -1;\n\t\tsprite.position.x = this.position.x - sprite.width + xOffset;\n\t\tsprite.position.y =\n\t\t\tthis.position.y + this.halfHeight - sprite.halfHeight + yOffset;\n\t}\n\n\tputCenter(sprite: DisplayObject, xOffset = 0, yOffset = 0): void {\n\t\tsprite.position.x =\n\t\t\tthis.position.x - this.width * this.pivot.x + this.halfWidth + xOffset;\n\t\tsprite.position.y =\n\t\t\tthis.position.y - this.height * this.pivot.y + this.halfHeight + yOffset;\n\t}\n\n\tswapChildren(child1: DisplayObject, child2: DisplayObject): void {\n\t\tconst index1 = this.children.indexOf(child1);\n\t\tconst index2 = this.children.indexOf(child2);\n\n\t\tif (index1 !== -1 && index2 !== -1) {\n\t\t\tthis.children[index1] = child2;\n\t\t\tthis.children[index2] = child1;\n\t\t\treturn;\n\t\t}\n\n\t\tthrow new Error(\n\t\t\t`Both objects must be a child of the calle ${JSON.stringify(this)}`,\n\t\t);\n\t}\n\n\tadd(...spritesToAdd: DisplayObject[]): void {\n\t\tspritesToAdd.forEach((sprite) => {\n\t\t\tthis.addChild(sprite);\n\t\t});\n\t}\n\n\tremove(...spritesToRemove: DisplayObject[]): void {\n\t\tspritesToRemove.forEach((sprite) => this.removeChild(sprite));\n\t}\n}\n"]}