{"version":3,"sources":["../../src/extras/Backdrop.ts","../../src/extras/SplashScreen.ts","../../src/extras/TransitionScreen.ts"],"names":["Backdrop","Rectangle","source","width","height","tileWidth","tileHeight","columns","rows","Grid","tile","Sprite","value","SplashScreen","Scene","assetsToLoad","image","callback","forceClick","g","ctaText","yOffset","e","maxWidth","back","front","loaded","total","ratio","obj","wait","start","Text","TransitionScreen","delay","color","Point","removeAfterBlink","tween1","Tween","alpha","tween2"],"mappings":"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","sourcesContent":["import { Rectangle } from \"inks2d/geom\";\nimport { Sprite } from \"inks2d/graphics\";\nimport { Grid } from \"inks2d/group\";\n\nexport class Backdrop extends Rectangle {\n\tprivate _tileGrid: Grid;\n\n\tconstructor(source: any, width: number, height: number) {\n\t\tsuper(width, height, \"none\", \"none\");\n\n\t\tlet tileWidth: number, tileHeight: number, columns: number, rows: number;\n\n\t\tthis.pivot.x = this.pivot.y = 0;\n\t\tthis.renderOutside = true;\n\t\tthis.mask = true;\n\n\t\t// Is it a texture atlas?\n\t\tif (source.frame) {\n\t\t\ttileWidth = source.frame.w;\n\t\t\ttileHeight = source.frame.h;\n\t\t} else {\n\t\t\ttileWidth = source.width;\n\t\t\ttileHeight = source.height;\n\t\t}\n\n\t\t/**\n\t\t * Calculates the number of rows and columns.\n\t\t * The number of rows and columns have to be always 1\n\t\t * bigger than the total number of tiles that fill\n\t\t * the rectangle. It gives an aditional row and column,\n\t\t * allowing us to create infite scroll effect;\n\t\t */\n\n\t\t/**\n\t\t * 1. Columns\n\t\t *\n\t\t * If the rectangle width is bigger than the tile width,\n\t\t * calculates the number columns.\n\t\t */\n\t\tif (width >= tileWidth) {\n\t\t\tcolumns = Math.round(width / tileWidth) + 1;\n\t\t} else {\n\t\t\t/**\n\t\t\t * If the rectangle width is smaller than the tile width,\n\t\t\t * defines the columns to 2, which is the minimum;\n\t\t\t */\n\t\t\tcolumns = 2;\n\t\t}\n\n\t\t/**\n\t\t * 2. Rows\n\t\t *\n\t\t * If the rectangle height is bigger than the tile height,\n\t\t * calculates the number rows.\n\t\t */\n\t\tif (height >= tileHeight) {\n\t\t\trows = Math.round(height / tileHeight) + 1;\n\t\t} else {\n\t\t\t/**\n\t\t\t * If the rectangle height is smaller than the tile height,\n\t\t\t * defines the rows to 2, which is the minimum;\n\t\t\t */\n\t\t\trows = 2;\n\t\t}\n\n\t\tthis._tileGrid = new Grid(\n\t\t\tcolumns,\n\t\t\trows,\n\t\t\ttileWidth,\n\t\t\ttileHeight,\n\t\t\tfalse,\n\t\t\t0,\n\t\t\t0,\n\t\t\t() => {\n\t\t\t\tconst tile = new Sprite(source);\n\t\t\t\ttile.pivot.x = tile.pivot.y = 0;\n\n\t\t\t\treturn tile;\n\t\t\t},\n\t\t);\n\n\t\tthis._tileGrid.pivot.x = this._tileGrid.pivot.y = 0;\n\t\tthis._tileGrid.dynamicSize = true;\n\t\tthis._tileGrid.renderOutside = true;\n\n\t\tthis._tileGrid.position.x = -(this._tileGrid.width - this.width);\n\t\tthis._tileGrid.position.y = -(this._tileGrid.height - this.height);\n\t}\n\n\toverride added(): void {\n\t\tthis.addChild(this._tileGrid);\n\t}\n\n\tpublic setTileX(value: number): void {\n\t\tthis._tileGrid.position.x += value;\n\n\t\tif (this._tileGrid.position.x >= value) {\n\t\t\tthis._tileGrid.position.x = -(this._tileGrid.width - this.width - value);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._tileGrid.position.x < -(this._tileGrid.width - this.width)) {\n\t\t\tthis._tileGrid.position.x = value;\n\t\t}\n\t}\n\n\tpublic setTileY(value: number): void {\n\t\tthis._tileGrid.position.y += value;\n\n\t\tif (this._tileGrid.position.y >= value) {\n\t\t\tthis._tileGrid.position.y = -(\n\t\t\t\tthis._tileGrid.height -\n\t\t\t\tthis.height -\n\t\t\t\tvalue\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._tileGrid.position.y < -(this._tileGrid.height - this.height)) {\n\t\t\tthis._tileGrid.position.y = value;\n\t\t}\n\t}\n\n\tpublic setAlpha(value: number): void {\n\t\tthis._tileGrid.alpha = value;\n\t}\n\n\tpublic getAlpha(): number {\n\t\treturn this._tileGrid.alpha;\n\t}\n}\n","import { DisplayObject } from \"DisplayObject\";\nimport { Engine } from \"Engine\";\nimport { Scene } from \"Scene\";\nimport { Rectangle } from \"inks2d/geom\";\nimport { Text } from \"inks2d/text\";\nimport { wait } from \"inks2d/utils\";\n\nexport class SplashScreen extends Scene {\n\tprivate _loader: Rectangle = new Rectangle(1080, 1920, \"black\");\n\tprivate _assetsToLoad: string[];\n\tprivate _image: DisplayObject;\n\tprivate _callback: () => void;\n\tprivate _forceClick: boolean;\n\tprivate _g: Engine;\n\tprivate _ctaText: string;\n\tprivate _yOffset: number;\n\n\tconstructor(\n\t\tassetsToLoad: string[],\n\t\timage: DisplayObject,\n\t\tcallback: () => void | undefined,\n\t\tforceClick: boolean,\n\t\tg: Engine,\n\t\tctaText: string = \"TAP TO START\",\n\t\tyOffset: number = 0,\n\t) {\n\t\tsuper();\n\n\t\tthis._assetsToLoad = assetsToLoad;\n\t\tthis._image = image;\n\t\tthis._callback = callback;\n\t\tthis._forceClick = forceClick;\n\t\tthis._g = g;\n\t\tthis._ctaText = ctaText;\n\t\tthis._yOffset = yOffset;\n\t}\n\n\toverride start(e: Engine): void {\n\t\tsuper.start(e);\n\n\t\tthis._loader.pivot.x = this._loader.pivot.y = 0;\n\t\tthis._loader.width = this._g.stage.width;\n\t\tthis._loader.height = this._g.stage.height;\n\t\tthis._g.stage.addChild(this._loader);\n\n\t\tthis._assetsToLoad && this.loadAssets();\n\t}\n\n\tprivate loadAssets(): void {\n\t\tthis._image.pivot.x = this._image.pivot.y = 0.5;\n\t\tthis.updateObjScale(this._image);\n\t\tthis._loader.putCenter(this._image);\n\t\tthis._loader.addChild(this._image);\n\n\t\tconst maxWidth = this._g.stage.width / 2.5;\n\n\t\tconst back = new Rectangle(maxWidth, 50, \"gray\", \"black\", 2, 5);\n\t\tback.pivot.x = 0;\n\t\tthis.updateObjSize(back);\n\t\tback.width = maxWidth - 3;\n\t\tback.position.x = 540 - 210;\n\t\tback.position.y =\n\t\t\t960 + this._image.height / 2 + back.height + this._yOffset;\n\t\tthis.updateObjPos(back);\n\t\tthis._loader.addChild(back);\n\n\t\tconst front = new Rectangle(0, 50, \"#ddd\", \"none\", 2, 1);\n\t\tfront.pivot.x = 0;\n\t\tthis.updateObjSize(front);\n\t\tfront.position.x = 540 - 210;\n\t\tfront.position.y =\n\t\t\t960 + this._image.height / 2 + back.height + this._yOffset;\n\t\tthis.updateObjPos(front);\n\t\tthis._loader.addChild(front);\n\n\t\tthis._g.loader.onUpdate = (loaded, total) => {\n\t\t\tconst ratio = Math.floor((loaded * 100) / total);\n\t\t\tfront.width = (ratio * maxWidth) / 100;\n\t\t};\n\n\t\tthis._g.loader.onComplete = () => {\n\t\t\tthis.startGame();\n\t\t};\n\n\t\tthis._g.loader.load(this._assetsToLoad);\n\t}\n\n\tprivate updateObjScale(obj: DisplayObject): void {\n\t\tobj.scale.x = (this._g.stage.width * obj.scale.x) / 1080;\n\t\tobj.scale.y = (this._g.stage.height * obj.scale.y) / 1920;\n\t}\n\n\tprivate updateObjSize(obj: DisplayObject): void {\n\t\tobj.width = (this._g.stage.width * obj.width) / 1080;\n\t\tobj.height = (this._g.stage.height * obj.height) / 1920;\n\t}\n\n\tprivate updateObjPos(obj: DisplayObject): void {\n\t\tobj.position.x = (this._g.stage.width * obj.position.x) / 1080;\n\t\tobj.position.y = (this._g.stage.height * obj.position.y) / 1920;\n\t}\n\n\tprivate startGame(): void {\n\t\tif (!this._forceClick) {\n\t\t\twait(2000).then(() => {\n\t\t\t\tif (this._callback) this._callback();\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst start = new Text(this._ctaText, 48, \"white\");\n\t\tstart.family = \"ubuntu\";\n\t\tstart.pivot.x = start.pivot.y = 0.5;\n\t\tstart.position.x = 540 + 8;\n\t\tstart.position.y = 960 + this._image.height / 2 + 90 + this._yOffset;\n\t\tstart.size = (this._g.stage.width * start.size) / 1080;\n\t\tthis.updateObjPos(start);\n\t\tthis._loader.addChild(start);\n\n\t\tthis._g.pointer.release = () => {\n\t\t\tthis._g.pointer.release = undefined;\n\t\t\tif (this._callback) this._callback();\n\t\t};\n\t}\n}\n","import { Engine } from \"Engine\";\nimport { Tween } from \"inks2d/effects/tweens\";\nimport { Rectangle } from \"inks2d/geom\";\nimport { Point } from \"inks2d/math\";\n\nexport class TransitionScreen extends Rectangle {\n\tprivate _delay: number;\n\tpublic onBetween: (() => void) | undefined;\n\n\tconstructor(delay: number, g: Engine, color: string = \"black\") {\n\t\tsuper(g.stage.width, g.stage.height, color);\n\n\t\tthis.pivot = new Point();\n\t\tthis.alpha = 0;\n\t\tthis._delay = delay;\n\t}\n\n\tstart(removeAfterBlink: boolean = true): void {\n\t\tconst tween1 = new Tween();\n\t\ttween1.onComplete = () => {\n\t\t\tif (this.onBetween) this.onBetween();\n\t\t};\n\t\ttween1.onUpdate = ({ alpha }) => {\n\t\t\tthis.alpha = alpha;\n\t\t};\n\t\ttween1.from({ alpha: 0 }).to({ alpha: 1 }).duration(this._delay);\n\n\t\tconst tween2 = new Tween();\n\t\ttween2.onComplete = () => {\n\t\t\tif (removeAfterBlink) this.parent?.removeChild(this);\n\t\t};\n\t\ttween2.onUpdate = ({ alpha }) => {\n\t\t\tthis.alpha = alpha;\n\t\t};\n\t\ttween2.from({ alpha: 1 }).to({ alpha: 0 }).duration(this._delay);\n\n\t\ttween1.chain(tween2);\n\t\ttween1.start();\n\t}\n}\n"]}