{"version":3,"sources":["../src/math/Point.ts","../src/math/Vector2D.ts","../src/math/index.ts"],"names":["Point","x","y","value","max","v2","dx","dy","Vector2D","a","b","scaleAmount","vec","lx","ly","rx","ry","newLength","dotProd","graphics","basicMode","vxPos","vyPosX","vyPosY","vyRotate","randomInt","min","randomFloat","randomOption","arr","i","shuffleArray","id","toRadians","angle","toAngle","radians","round","num","s1","s2","distance","vx","vy","valueWrap"],"mappings":"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","sourcesContent":["/**\n *\n * Main game engine class. Manages the game loop.\n *\n */\nexport class Point {\n\tprivate _x: number;\n\tprivate _y: number;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param x\n\t * @param y\n\t */\n\tconstructor(x: number = 0, y: number = 0) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t}\n\n\t/**\n\t * Generates a copy of this vector.\n\t *\n\t * @returns Point A copy of this vector\n\t */\n\tpublic clone(): Point {\n\t\treturn new Point(this._x, this._y);\n\t}\n\n\t/**\n\t * Sets this vector's x and y values (and thus length) to zero.\n\t *\n\t * @returns Point A reference to this vector.\n\t */\n\tpublic zero(): Point {\n\t\tthis._x = 0;\n\t\tthis._y = 0;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Whether or not this vector is equal to zero,\n\t * i.e. its x, y and length are zero.\n\t *\n\t * @returns Boolean True if vector is zero, otherwise false.\n\t */\n\tpublic isZero(): boolean {\n\t\treturn this._x === 0 && this._y === 0;\n\t}\n\n\t/***/\n\tget x(): number {\n\t\treturn this._x;\n\t}\n\n\t/**\n\t * Gets/Sets the x value of this vector.\n\t */\n\tset x(value: number) {\n\t\tthis._x = value;\n\t}\n\n\t/***/\n\tget y(): number {\n\t\treturn this._y;\n\t}\n\n\t/**\n\t * Gets/Sets the y value of this vector.\n\t */\n\tset y(value: number) {\n\t\tthis._y = value;\n\t}\n\n\t/***/\n\tget length(): number {\n\t\treturn Math.sqrt(this.lengthSquared);\n\t}\n\n\t/**\n\t * Gets/Sets the length or magnitude of this vector.\n\t * Changing the length will change the x and y\n\t * but not the angle of this vector.\n\t */\n\tset length(value: number) {\n\t\tthis._x = Math.cos(this.angle) * value;\n\t\tthis._y = Math.sin(this.angle) * value;\n\t}\n\n\t/**\n\t * Gets the length of this vector, squared.\n\t */\n\tget lengthSquared(): number {\n\t\treturn this._x * this._x + this._y * this._y;\n\t}\n\n\t/***/\n\tget angle(): number {\n\t\treturn Math.atan2(this._y, this._x);\n\t}\n\n\t/**\n\t * Gets/Sets the angle of this vector.\n\t * Changing the angle also changes the x and y but\n\t * retains the same length.\n\t */\n\tset angle(value: number) {\n\t\tthis._x = Math.cos(value) * this.length;\n\t\tthis._y = Math.sin(value) * this.length;\n\t}\n\n\tpublic set(x: number = 0, y: number = 0): void {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\t/**\n\t * Ensures the length of the vector is no longer than\n\t * the given value.\n\t *\n\t * @param max The maximum value this vector should be.\n\t * @returns\n\t */\n\tpublic truncate(max: number): Point {\n\t\tthis.length = Math.min(max, this.length);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Whether or not this vector is normalized, i.e. its\n\t * length is equal to one.\n\t *\n\t * @returns Boolean True if length is one, otherwise false.\n\t */\n\tpublic isNormalized(): boolean {\n\t\treturn this.length === 1;\n\t}\n\n\t/**\n\t * Calculates the distance from this vector to another\n\t * given vector.\n\t *\n\t * @param v2 A Point instance\n\t * @returns Number The distance from this vector to the\n\t * vector passed as a parameter.\n\t */\n\tpublic dist(v2: Point): number {\n\t\treturn Math.sqrt(this.distSquared(v2));\n\t}\n\n\t/**\n\t * Calculates the distance squared from this vector to another\n\t * given vector.\n\t *\n\t * @param v2 A Point instance\n\t * @returns Number The distance squared from this vector\n\t * to the vector passed as a parameter.\n\t */\n\tpublic distSquared(v2: Point): number {\n\t\tconst dx = v2.x - this.x;\n\t\tconst dy = v2.y - this.y;\n\n\t\treturn dx * dx + dy * dy;\n\t}\n\n\t/**\n\t * Adds a vector to this vector, creating a new\n\t * Point instance to hold the result.\n\t *\n\t * @param v2 A Point instance\n\t * @returns Point A new vector containing the results of\n\t * the addition.\n\t */\n\tpublic add(v2: Point): Point {\n\t\treturn new Point(this._x + v2.x, this._y + v2.y);\n\t}\n\n\t/**\n\t * Subtracts a vector from this vector, creating a new\n\t * Point instance to hold the result.\n\t *\n\t * @param v2 A Point instance\n\t * @returns Point A new vector containing the results of\n\t * the subtraction.\n\t */\n\tpublic subtract(v2: Point): Point {\n\t\treturn new Point(this._x - v2.x, this._y - v2.y);\n\t}\n\n\t/**\n\t * Multiplies this vector by a value, creating a new\n\t * Point instance to hold the result.\n\t *\n\t * @param value A number\n\t * @returns Point A new vector containing the results of\n\t * the multiplication.\n\t */\n\tpublic multiply(value: number): Point {\n\t\treturn new Point(this._x * value, this._y * value);\n\t}\n\n\t/**\n\t * Divides this vector by a value, creating a new Point\n\t * instance to hold the result.\n\t *\n\t * @param value A number\n\t * @returns Point A new vector containing the results of\n\t * the division.\n\t */\n\tpublic divide(value: number): Point {\n\t\treturn new Point(this._x / value, this._y / value);\n\t}\n\n\t/**\n\t * Indicates whether this vector and another Point instance\n\t * are equal in value.\n\t *\n\t * @param v2 A Point instance\n\t * @returns Boolean True if the other vector is equal to\n\t * this one, false if not.\n\t */\n\tpublic equals(v2: Point): boolean {\n\t\treturn this._x === v2.x && this._y === v2.y;\n\t}\n}\n","import { Point } from \"./Point\";\n\nexport class Vector2D {\n\tprivate readonly _a: Point;\n\tprivate readonly _b: Point;\n\tprivate _vx: number = 0;\n\tprivate _vy: number = 0;\n\tprivate _scaleAmount: number = 0;\n\n\tconstructor(\n\t\ta: Point = new Point(0, 0),\n\t\tb: Point = new Point(0, 0),\n\t\tscaleAmount: number = 1,\n\t) {\n\t\tthis._a = a;\n\t\tthis._b = b;\n\t\tthis.scaleAmount = scaleAmount;\n\t}\n\n\tget a(): Point {\n\t\treturn this._a;\n\t}\n\n\tget b(): Point {\n\t\treturn this._b;\n\t}\n\n\tget vx(): number {\n\t\tif (this._vx === 0) return this._b.x - this._a.x;\n\t\treturn this._vx;\n\t}\n\n\tset vx(value: number) {\n\t\tthis._vx = value;\n\t}\n\n\tget vy(): number {\n\t\tif (this._vy === 0) return this._b.y - this._a.y;\n\t\treturn this._vy;\n\t}\n\n\tset vy(value: number) {\n\t\tthis._vy = value;\n\t}\n\n\tget angle(): number {\n\t\treturn Math.atan2(this.vy, this.vx);\n\t}\n\n\tset angle(value: number) {\n\t\tthis.b.x = this.a.x + Math.cos(value) * this.length;\n\t\tthis.b.y = this.a.y + Math.sin(value) * this.length;\n\t}\n\n\tget length(): number {\n\t\tif (this.vx !== 0 || this.vy !== 0) {\n\t\t\treturn Math.sqrt(this.lengthSquared);\n\t\t}\n\n\t\treturn 0.001;\n\t}\n\n\tset length(value: number) {\n\t\tthis._b.x = this._a.x + this.normalized.x * value;\n\t\tthis._b.y = this._a.y + this.normalized.y * value;\n\t}\n\n\tget lengthSquared(): number {\n\t\treturn this.vx * this.vx + this.vy * this.vy;\n\t}\n\n\tget leftNormal(): Vector2D {\n\t\tconst vec = new Vector2D();\n\t\tconst lx = this.vy;\n\t\tconst ly = -this.vx;\n\n\t\tif (this._vx === 0 && this._vy === 0) {\n\t\t\tvec.a.x = this.a.x;\n\t\t\tvec.a.y = this.a.y;\n\t\t\tvec.b.x = this.a.x + lx;\n\t\t\tvec.b.y = this.a.y + ly;\n\t\t} else {\n\t\t\tvec.vx = this.vx;\n\t\t\tvec.vy = this.vy;\n\t\t}\n\n\t\treturn vec;\n\t}\n\n\tget rightNormal(): Vector2D {\n\t\tconst vec = new Vector2D();\n\t\tconst rx = -this.vy;\n\t\tconst ry = this.vx;\n\n\t\tif (this._vx === 0 && this._vy === 0) {\n\t\t\tvec.a.x = this.a.x;\n\t\t\tvec.a.y = this.a.y;\n\t\t\tvec.b.x = this.a.x + rx;\n\t\t\tvec.b.y = this.a.y + ry;\n\t\t} else {\n\t\t\tvec.vx = this.vx;\n\t\t\tvec.vy = this.vy;\n\t\t}\n\n\t\treturn vec;\n\t}\n\n\tget normalized(): Point {\n\t\tconst vec = new Point(0.001, 0.001);\n\n\t\tif (this.length !== 0) {\n\t\t\tvec.x = this.vx / this.length;\n\t\t\tvec.y = this.vy / this.length;\n\t\t}\n\n\t\treturn vec;\n\t}\n\n\tget scaleAmount(): number {\n\t\treturn this._scaleAmount;\n\t}\n\n\tset scaleAmount(value: number) {\n\t\tconst newLength = this.length * value;\n\t\tthis.length = newLength;\n\t\tthis._scaleAmount = value;\n\t}\n\n\t/**\n\t *\n\t * @param v2 Another Point instance\n\t * @returns Number The dot product of this vector and\n\t * the one passed in as a parameter.\n\t */\n\tdotProd(v2: Vector2D): number {\n\t\treturn this.vx * v2.normalized.x + this.vy * v2.normalized.y;\n\t}\n\n\tprojection(v2: Vector2D): Vector2D {\n\t\tconst dotProd = this.dotProd(v2);\n\t\tconst vec = new Point(v2.normalized.x * dotProd, v2.normalized.y * dotProd);\n\n\t\treturn new Vector2D(v2.a.clone(), v2.a.add(vec));\n\t}\n\n\treverse(): void {\n\t\tthis.angle += Math.PI;\n\t}\n\n\t/**\n\t *\n\t * @param v2 Another Point instance\n\t * @returns Number The dot product of this vector and\n\t * the one passed in as a parameter.\n\t */\n\tperpDotProd(v2: Vector2D): number {\n\t\treturn (\n\t\t\tthis.leftNormal.vx * v2.normalized.x +\n\t\t\tthis.leftNormal.vy * v2.normalized.y\n\t\t);\n\t}\n\n\t/**\n\t * Finds a vector that is perpendicular to this vector.\n\t *\n\t * @returns Point A vector perpendicular to this vector.\n\t */\n\tget perp(): Vector2D {\n\t\treturn new Vector2D(\n\t\t\tnew Point(this.a.x, this.a.y),\n\t\t\tnew Point(-this.vy, this.vx),\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * @param v2 Another vector instance.\n\t * @returns Number If to the left, returns -1.\n\t * If to the right, +1;\n\t */\n\tsign(v2: Vector2D): number {\n\t\treturn this.perp.dotProd(v2) < 0 ? -1 : 1;\n\t}\n\n\tclone(): Vector2D {\n\t\tconst vec = new Vector2D(this.a, this.b);\n\t\tvec.vx = this.vx;\n\t\tvec.vy = this.vy;\n\n\t\treturn vec;\n\t}\n\n\tdraw(graphics: CanvasRenderingContext2D, basicMode: boolean = true): void {\n\t\tgraphics.strokeStyle = \"red\";\n\t\tgraphics.lineWidth = 1;\n\t\tgraphics.beginPath();\n\t\tgraphics.moveTo(this.a.x, this.a.y);\n\t\tgraphics.lineTo(this.b.x, this.b.y);\n\t\tgraphics.stroke();\n\n\t\tif (!basicMode) {\n\t\t\t// Draw the x component\n\t\t\tgraphics.strokeStyle = \"black\";\n\t\t\tgraphics.beginPath();\n\t\t\tgraphics.moveTo(this.a.x, this.a.y);\n\t\t\tgraphics.lineTo(this.b.x, this.a.y);\n\t\t\tgraphics.stroke();\n\n\t\t\t// Draw the y component\n\t\t\tgraphics.strokeStyle = \"black\";\n\t\t\tgraphics.beginPath();\n\t\t\tgraphics.moveTo(this.b.x, this.a.y);\n\t\t\tgraphics.lineTo(this.b.x, this.b.y);\n\t\t\tgraphics.stroke();\n\n\t\t\t// Draw the right normal\n\t\t\tgraphics.beginPath();\n\t\t\tgraphics.moveTo(this.a.x, this.a.y);\n\t\t\tgraphics.lineTo(this.rightNormal.b.x, this.rightNormal.b.y);\n\t\t\tgraphics.stroke();\n\n\t\t\t// Draw the left normal\n\t\t\tgraphics.beginPath();\n\t\t\tgraphics.moveTo(this.a.x, this.a.y);\n\t\t\tgraphics.lineTo(this.leftNormal.b.x, this.leftNormal.b.y);\n\t\t\tgraphics.stroke();\n\n\t\t\tif (this.length > 20) {\n\t\t\t\t// Position the x component text\n\t\t\t\tlet vxPos = this.a.x + this.vx + 20;\n\t\t\t\tif (this.vx > 10) {\n\t\t\t\t\tvxPos -= Math.floor(graphics.measureText(\"vx\").width) + 20;\n\t\t\t\t}\n\t\t\t\tgraphics.textBaseline = \"bottom\";\n\t\t\t\tgraphics.textAlign = \"right\";\n\t\t\t\tgraphics.fillText(\"vx\", vxPos, this.a.y);\n\n\t\t\t\t// Position the y component text\n\t\t\t\tgraphics.save();\n\t\t\t\tconst vyPosX = this.a.x + this.vx;\n\t\t\t\tlet vyPosY = this.a.y - 20;\n\t\t\t\tlet vyRotate = (270 * Math.PI) / 180;\n\t\t\t\tif (this.vy > 10) {\n\t\t\t\t\tvyPosY = this.a.y + 20;\n\t\t\t\t\tvyRotate = Math.PI / 2;\n\t\t\t\t}\n\t\t\t\tgraphics.translate(vyPosX, vyPosY);\n\t\t\t\tgraphics.rotate(vyRotate);\n\t\t\t\tgraphics.textBaseline = \"bottom\";\n\t\t\t\tgraphics.textAlign = \"right\";\n\t\t\t\tgraphics.fillText(\"vy\", 0, 0);\n\t\t\t\tgraphics.restore();\n\n\t\t\t\t// Position the right normal text\n\t\t\t\tgraphics.save();\n\t\t\t\tgraphics.translate(this.rightNormal.b.x, this.rightNormal.b.y);\n\t\t\t\tgraphics.rotate(this.rightNormal.angle);\n\t\t\t\tgraphics.fillText(\"rn\", 0, 0);\n\t\t\t\tgraphics.restore();\n\n\t\t\t\t// Position the left normal text\n\t\t\t\tgraphics.save();\n\t\t\t\tgraphics.translate(this.leftNormal.b.x, this.leftNormal.b.y);\n\t\t\t\tgraphics.rotate(this.leftNormal.angle);\n\t\t\t\tgraphics.fillText(\"ln\", 0, 0);\n\t\t\t\tgraphics.restore();\n\t\t\t}\n\t\t}\n\t}\n}\n","import { DisplayObject } from \"DisplayObject\";\n\nexport { Point } from \"./Point\";\nexport { Vector2D } from \"./Vector2D\";\n\nexport const randomInt = (min: number, max: number): number => {\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const randomFloat = (min: number, max: number): number => {\n\treturn min + Math.random() * (max - min);\n};\n\nexport const randomOption = (arr: any[]): any => {\n\tconst i = randomInt(0, arr.length - 1);\n\treturn arr[i];\n};\n\nexport const shuffleArray = (arr: any[]): any[] => {\n\tarr = arr.concat([]);\n\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tconst id = Math.floor(Math.random() * i);\n\t\tconst a = arr[i];\n\t\tconst b = arr[id];\n\n\t\tarr[id] = a;\n\t\tarr[i] = b;\n\t}\n\n\treturn arr;\n};\n\nexport const toRadians = (angle: number): number => {\n\treturn (angle * Math.PI) / 180;\n};\n\nexport const toAngle = (radians: number): number => {\n\treturn (radians * 180) / Math.PI;\n};\n\nexport const round = (num: number): number => {\n\treturn (0.5 + num) | 0;\n};\n\nexport const angle = (s1: DisplayObject, s2: DisplayObject): number => {\n\treturn Math.atan2(\n\t\ts2.localCenterY - s1.localCenterY,\n\t\ts2.localCenterX - s1.localCenterX,\n\t);\n};\n\nexport const distance = (s1: DisplayObject, s2: DisplayObject): number => {\n\tconst vx = s2.localCenterX - s1.localCenterX;\n\tconst vy = s2.localCenterY - s1.localCenterY;\n\n\treturn Math.sqrt(vx * vx + vy * vy);\n};\n\nexport const valueWrap = (value: number, min: number, max: number): number => {\n\tif (value < min) return min;\n\telse if (value > max) return max;\n\treturn value;\n};\n"]}