{"version":3,"sources":["../../../src/effects/particles/ParticleSystem.ts","../../../src/effects/particles/Emitter.ts"],"names":["ParticleSystem","Point","source","position","gravity","numParticles","randomSpacing","minAngle","maxAngle","minSize","maxSize","minSpeed","maxSpeed","minScaleSpeed","maxScaleSpeed","minAlphaSpeed","maxAlphaSpeed","minRotationSpeed","maxRotationSpeed","maxInteractions","value","start","end","spacing","i","angle","radians","randomFloat","particle","Sprite","randomInt","size","speed","EC_PARTICLES","remove","Emitter","EC_EMITTERS","gameElapsed","name","particleData","delay","elapsed","last"],"mappings":"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","sourcesContent":["import { Point } from \"inks2d/math\";\nimport { type DisplayObject } from \"DisplayObject\";\nimport { randomInt, randomFloat } from \"inks2d/math\";\nimport { EC_PARTICLES } from \"EngineConstants\";\nimport { Sprite } from \"inks2d/graphics\";\nimport { remove } from \"inks2d/utils\";\n\n/**\n *\n * Defines a particle system.\n *\n * ```ts\n * import { Engine, Scene } from \"inks2d\";\n * import { ParticleSystem } from \"inks2d/effects/particles\";\n * import { Spritemap } from \"inks2d/graphics\";\n * import { Point } from \"inks2d/math\";\n *\n * const g = new Engine(512, 512, 60, false, \"none\", \"black\");\n *\n * class Main extends Scene {\n *   private _flames: ParticleSystem = new ParticleSystem(() => {\n *     const sprite = new Spritemap(g.loader.store[\"assets/flames.png\"], 256, 256);\n *     sprite.blendMode = \"lighter\";\n *     g.stage.addChild(sprite);\n *\n *     return sprite;\n *   });\n *\n *   constructor() {\n *     super();\n *   }\n *\n *   async start(engine: Engine) {\n *     super.start(engine);\n *     this._flames.setPosition(new Point(g.stage.halfWidth, g.stage.halfHeight));\n *   }\n *\n *   update() {\n *     this._flames.emit();\n *   }\n * }\n *\n * g.loader.onComplete = () => {\n *   g.scene = new Main();\n *   g.start();\n * };\n *\n * g.loader.load([\"assets/flames.png\"]);\n * ```\n */\nexport class ParticleSystem {\n\tprivate readonly _source: () => DisplayObject;\n\tprivate _angles: number[];\n\n\tprivate readonly _randomSpacing: boolean;\n\tprivate _minAngle: number;\n\tprivate _maxAngle: number;\n\tprivate _minSize: number;\n\tprivate _maxSize: number;\n\tprivate _minSpeed: number;\n\tprivate _maxSpeed: number;\n\tprivate _numParticles: number;\n\n\tprivate _minScaleSpeed: number;\n\tprivate _maxScaleSpeed: number;\n\tprivate _minAlphaSpeed: number;\n\tprivate _maxAlphaSpeed: number;\n\tprivate _minRotationSpeed: number;\n\tprivate _maxRotationSpeed: number;\n\tprivate readonly _maxInteractions: number;\n\n\tpublic position: Point = new Point();\n\tpublic gravity: Point = new Point();\n\n\t/**\n\t * Constructor. Defines startup information about your game.\n\t *\n\t * @param source The width of your game.\n\t * @param position The height of your game.\n\t * @param gravity The game framerate, in frames per second.\n\t * @param numParticles If a fixed-framerate should be used.\n\t * @param randomSpacing Set a border in the canvas.\n\t * @param minAngle Canvas background color.\n\t * @param maxAngle The width of your game.\n\t * @param minSize The height of your game.\n\t * @param maxSize The game framerate, in frames per second.\n\t * @param minSpeed If a fixed-framerate should be used.\n\t * @param maxSpeed Set a border in the canvas.\n\t * @param minScaleSpeed Canvas background color.\n\t * @param maxScaleSpeed Canvas background color.\n\t * @param minAlphaSpeed Canvas background color.\n\t * @param maxAlphaSpeed Canvas background color.\n\t * @param minRotationSpeed Canvas background color.\n\t * @param maxRotationSpeed Canvas background color.\n\t * @param maxInteractions Canvas background color.\n\t *\n\t */\n\tconstructor(\n\t\tsource: () => DisplayObject,\n\t\tposition: Point = new Point(),\n\t\tgravity: Point = new Point(),\n\t\tnumParticles: number = 10,\n\t\trandomSpacing: boolean = true,\n\t\tminAngle: number = 0,\n\t\tmaxAngle: number = 360,\n\t\tminSize: number = 4,\n\t\tmaxSize: number = 16,\n\t\tminSpeed: number = 0.1,\n\t\tmaxSpeed: number = 1,\n\t\tminScaleSpeed: number = 0.01,\n\t\tmaxScaleSpeed: number = 0.05,\n\t\tminAlphaSpeed: number = 0.02,\n\t\tmaxAlphaSpeed: number = 0.02,\n\t\tminRotationSpeed: number = 0.01,\n\t\tmaxRotationSpeed: number = 0.03,\n\t\tmaxInteractions: number = Infinity,\n\t) {\n\t\tthis._source = source;\n\n\t\tthis._angles = [];\n\n\t\tthis.position = position;\n\t\tthis.gravity = gravity;\n\n\t\tthis._randomSpacing = randomSpacing;\n\t\tthis._minAngle = minAngle;\n\t\tthis._maxAngle = maxAngle;\n\t\tthis._minSize = minSize;\n\t\tthis._maxSize = maxSize;\n\t\tthis._minSpeed = minSpeed;\n\t\tthis._maxSpeed = maxSpeed;\n\t\tthis._numParticles = numParticles;\n\n\t\tthis._minScaleSpeed = minScaleSpeed;\n\t\tthis._maxScaleSpeed = maxScaleSpeed;\n\t\tthis._minAlphaSpeed = minAlphaSpeed;\n\t\tthis._maxAlphaSpeed = maxAlphaSpeed;\n\t\tthis._minRotationSpeed = minRotationSpeed;\n\t\tthis._maxRotationSpeed = maxRotationSpeed;\n\t\tthis._maxInteractions = maxInteractions;\n\t}\n\n\tpublic setNumParticles(value: number): ParticleSystem {\n\t\tthis._numParticles = value;\n\n\t\treturn this;\n\t}\n\n\tpublic setPosition(value: Point): ParticleSystem {\n\t\tthis.position = value.clone();\n\n\t\treturn this;\n\t}\n\n\tpublic setAngle(start: number, end: number): ParticleSystem {\n\t\tthis._minAngle = start;\n\t\tthis._maxAngle = end;\n\n\t\treturn this;\n\t}\n\n\tpublic setSize(start: number, end: number): ParticleSystem {\n\t\tthis._minSize = start;\n\t\tthis._maxSize = end;\n\n\t\treturn this;\n\t}\n\n\tpublic setSpeed(start: number, end: number): ParticleSystem {\n\t\tthis._minSpeed = start;\n\t\tthis._maxSpeed = end;\n\n\t\treturn this;\n\t}\n\n\tpublic setScaleSpeed(start: number, end: number): ParticleSystem {\n\t\tthis._minScaleSpeed = start;\n\t\tthis._maxScaleSpeed = end;\n\n\t\treturn this;\n\t}\n\n\tpublic setAlphaSpeed(start: number, end: number): ParticleSystem {\n\t\tthis._minAlphaSpeed = start;\n\t\tthis._maxAlphaSpeed = end;\n\n\t\treturn this;\n\t}\n\n\tpublic setRotationSpeed(start: number, end: number): ParticleSystem {\n\t\tthis._minRotationSpeed = start;\n\t\tthis._maxRotationSpeed = end;\n\n\t\treturn this;\n\t}\n\n\tpublic emit(): void {\n\t\tconst spacing =\n\t\t\t(this._maxAngle - this._minAngle) / (this._numParticles - 1);\n\t\tthis._angles = [];\n\n\t\tfor (let i = 0; i < this._numParticles; i++) {\n\t\t\tlet angle, radians;\n\n\t\t\tif (this._randomSpacing) {\n\t\t\t\tangle = randomFloat(this._minAngle, this._maxAngle);\n\t\t\t\tradians = (Math.PI * angle) / 180;\n\t\t\t\tthis._angles.push(radians);\n\t\t\t} else {\n\t\t\t\tif (angle === undefined) angle = this._minAngle;\n\t\t\t\tthis._angles.push(angle);\n\t\t\t\tangle += spacing;\n\t\t\t}\n\t\t}\n\n\t\tthis._angles.forEach((angle) => {\n\t\t\tthis.makeParticle(angle);\n\t\t});\n\t}\n\n\tprivate makeParticle(angle: number): void {\n\t\tconst particle = this._source();\n\n\t\tif (particle instanceof Sprite && particle.frames.length > 0) {\n\t\t\tparticle.gotoAndStop(randomInt(0, particle.frames.length - 1));\n\t\t}\n\n\t\tparticle.position = this.position.clone();\n\n\t\tconst size = randomInt(this._minSize, this._maxSize);\n\t\tparticle.width = size;\n\t\tparticle.height = size;\n\n\t\tparticle.customProperties.scaleSpeed = randomFloat(\n\t\t\tthis._minScaleSpeed,\n\t\t\tthis._maxScaleSpeed,\n\t\t);\n\t\tparticle.customProperties.alphaSpeed = randomFloat(\n\t\t\tthis._minAlphaSpeed,\n\t\t\tthis._maxAlphaSpeed,\n\t\t);\n\t\tparticle.customProperties.rotationSpeed = randomFloat(\n\t\t\tthis._minRotationSpeed,\n\t\t\tthis._maxRotationSpeed,\n\t\t);\n\t\tparticle.customProperties.lives = this._maxInteractions;\n\n\t\tconst speed = randomFloat(this._minSpeed, this._maxSpeed);\n\t\tparticle.velocity.x = speed * Math.cos(angle);\n\t\tparticle.velocity.y = speed * Math.sin(angle);\n\n\t\tparticle.customProperties._____updateParticle = () => {\n\t\t\tparticle.velocity.x += this.gravity.x;\n\t\t\tparticle.velocity.y += this.gravity.y;\n\n\t\t\tparticle.position.x += particle.velocity.x;\n\t\t\tparticle.position.y += particle.velocity.y;\n\n\t\t\tif (particle.scale.x - particle.customProperties.scaleSpeed > 0) {\n\t\t\t\tparticle.scale.x -= particle.customProperties.scaleSpeed;\n\t\t\t}\n\n\t\t\tif (particle.scale.y - particle.customProperties.scaleSpeed > 0) {\n\t\t\t\tparticle.scale.y -= particle.customProperties.scaleSpeed;\n\t\t\t}\n\n\t\t\tparticle.rotation += particle.customProperties.rotationSpeed as number;\n\t\t\tparticle.alpha -= particle.customProperties.alphaSpeed;\n\n\t\t\tif (particle.alpha <= 0 || --particle.customProperties.lives <= 0) {\n\t\t\t\tEC_PARTICLES.splice(EC_PARTICLES.indexOf(particle), 1);\n\n\t\t\t\tremove(particle);\n\t\t\t}\n\t\t};\n\n\t\tEC_PARTICLES.push(particle);\n\t}\n}\n","import { EC_EMITTERS } from \"EngineConstants\";\nimport { type ParticleSystem } from \"./ParticleSystem\";\n\ninterface ParticleData {\n\tparticle: ParticleSystem;\n\tdelay: number;\n\telapsed: number;\n\tlast: number;\n\tplaying: boolean;\n}\n\n/**\n *\n * Particle emitter used for emitting and rendering particle sprites.\n *\n * ```ts\n * import { Engine, Scene } from \"inks2d\";\n * import { Emitter, ParticleSystem } from \"inks2d/effects/particles\";\n * import { Spritemap } from \"inks2d/graphics\";\n * import { Point } from \"inks2d/math\";\n *\n * const g = new Engine(512, 512, 60, false, \"none\", \"black\");\n *\n * class Main extends Scene {\n *   constructor() {\n *     super();\n *   }\n *\n *   async start(engine: Engine) {\n *     super.start(engine);\n *\n *     const emitter = new Emitter();\n *     const flames = new ParticleSystem(() => {\n *       const sprite = new Spritemap(\n *         g.loader.store[\"assets/flames.png\"],\n *         256,\n *         256\n *       );\n *       sprite.blendMode = \"lighter\";\n *       g.stage.addChild(sprite);\n *\n *       return sprite;\n *     });\n *\n *     flames.setPosition(new Point(g.stage.halfWidth, g.stage.halfHeight));\n *     emitter.addParticle(\"flames\", flames, 0.05);\n *     emitter.play(\"flames\");\n *   }\n * }\n *\n * g.loader.onComplete = () => {\n *   g.scene = new Main();\n *   g.start();\n * };\n *\n * g.loader.load([\"assets/flames.png\"]);\n * ```\n */\nexport class Emitter {\n\tprivate _particles: Record<string, ParticleData> = {};\n\tprivate readonly _playing: string[] = [];\n\tprivate _particleNames: string[] = [];\n\n\t/**\n\t * Constructor.\n\t */\n\tconstructor() {\n\t\tEC_EMITTERS.push(this);\n\t}\n\n\tpublic _____updateEmitter(gameElapsed: number): void {\n\t\tfor (let i = 0; i < this._playing.length; i++) {\n\t\t\tconst name = this._playing[i];\n\t\t\tconst particleData = this._particles[name];\n\n\t\t\tif (!particleData.playing) continue;\n\n\t\t\tconst particle = particleData.particle;\n\t\t\tconst delay = particleData.delay;\n\n\t\t\tlet elapsed = particleData.elapsed;\n\t\t\tconst last = particleData.last;\n\n\t\t\telapsed += gameElapsed;\n\n\t\t\tif (elapsed >= delay) {\n\t\t\t\tparticle.emit();\n\t\t\t\telapsed = 0;\n\t\t\t}\n\n\t\t\tthis._particles[name].elapsed = elapsed;\n\t\t\tthis._particles[name].last = last;\n\t\t}\n\t}\n\n\t/**\n\t * Adds a Particle System in the emitter.\n\t *\n\t * @param name Name of the particle system.\n\t * @param particle ParticleSystem object.\n\t * @param delay Delay between emits.\n\t */\n\tpublic addParticle(\n\t\tname: string,\n\t\tparticle: ParticleSystem,\n\t\tdelay: number,\n\t): void {\n\t\tthis._particles[name] = {\n\t\t\tparticle,\n\t\t\tdelay,\n\t\t\telapsed: 0,\n\t\t\tlast: 0,\n\t\t\tplaying: false,\n\t\t};\n\n\t\tthis._particleNames = Object.keys(this._particles);\n\t}\n\n\t/**\n\t * Play a specific Particle System.\n\t *\n\t * @param name Name of the particle system (defined in {@link Emitter.addParticle | addParticle}).\n\t */\n\tpublic play(name: string): void {\n\t\tif (!this._particles[name] || this._particles[name].playing) return;\n\n\t\tthis._particles[name].playing = true;\n\t\tthis._playing.push(name);\n\t}\n\n\t/**\n\t * Stop a specific Particle System.\n\t *\n\t * @param name Name of the particle system (defined in {@link Emitter.addParticle | addParticle}).\n\t */\n\tpublic stop(name: string): void {\n\t\tif (!this._particles[name] || this._particles[name].playing) return;\n\n\t\tthis._particles[name].playing = false;\n\t\tthis._playing.splice(this._playing.indexOf(name), 1);\n\t}\n\n\t/**\n\t * Play all Particle Systems.\n\t */\n\tpublic playAll(): void {\n\t\tfor (let i = 0; i < this._particleNames.length; i++) {\n\t\t\tconst name = this._particleNames[i];\n\t\t\tthis._particles[name].playing = true;\n\t\t\tthis._playing.push(name);\n\t\t}\n\t}\n\n\t/**\n\t * Stop all Particle Systems.\n\t */\n\tpublic stopAll(): void {\n\t\tfor (let i = 0; i < this._particleNames.length; i++) {\n\t\t\tconst name = this._particleNames[i];\n\t\t\tthis._particles[name].playing = false;\n\t\t\tthis._playing.splice(this._playing.indexOf(name), 1);\n\t\t}\n\t}\n}\n"]}