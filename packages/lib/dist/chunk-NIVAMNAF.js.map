{"version":3,"sources":["../src/Stage.ts","../src/Scene.ts"],"names":["Stage","DisplayObject","canvas","width","height","children","i","child","Scene","engine","viewportSize","EC_DRAGGABLE_SPRITES","EC_BUTTONS","EC_PARTICLES","EC_SHAKING_SPRITES"],"mappings":"oEAoCO,IAAMA,EAAN,cAAoBC,CAAc,CACvB,UAEjB,YAAYC,EAA2BC,EAAeC,EAAgB,CACrE,MAAM,EAEN,KAAK,MAAQD,EACb,KAAK,OAASC,EACd,KAAK,UAAYF,EAAO,WAAW,IAAI,CACxC,CAKA,IAAI,UAAqC,CACxC,OAAO,KAAK,SACb,CAEQ,eAAeG,EAAiC,CACvD,QAASC,EAAID,EAAS,OAAS,EAAGC,GAAK,EAAGA,IAAK,CAC9C,IAAMC,EAAQF,EAASC,CAAC,EAIxB,GAFAC,EAAM,QAAUA,EAAM,OAAO,EAEzBA,EAAM,UAAYA,EAAM,SAAS,OAAS,EAAG,CAChD,KAAK,eAAeA,EAAM,QAAQ,EAClC,UAGH,CAES,QAAe,CACvB,KAAK,eAAe,KAAK,QAAQ,CAClC,CACD,ECpCO,IAAMC,EAAN,KAAY,CACV,QACS,SAAgC,CAAC,EAOlD,MAAMC,EAAsB,CAC3B,IAAMC,EAAeD,EAAO,gBAAgB,EAC5C,KAAK,QAAUA,EACf,KAAK,SAAS,MAAQ,IAAIT,EACzB,KAAK,QAAQ,OACbU,EAAa,MACbA,EAAa,MACd,CACD,CAKA,IAAI,OAAe,CAClB,OAAO,KAAK,SAAS,KACtB,CAKA,QAAe,CACd,KAAK,MAAM,OAAO,CACnB,CAKA,SAAgB,CACfC,EAAqB,OAAS,EAC9BC,EAAW,OAAS,EACpBC,EAAa,OAAS,EACtBC,EAAmB,OAAS,CAC7B,CACD","sourcesContent":["import { DisplayObject } from \"./DisplayObject\";\n\n/**\n *\n * Updated by Engine, main game DisplayObject that holds all currently active display objects.\n *\n * > ⚠️ You can **ONLY** use this class by the {@link Scene.stage | Scene.stage} property.\n *\n * ```ts\n * import { Engine, Scene } from \"inks2d\";\n * import { Rectangle } from \"inks2d/graphics\";\n * import { Point } from \"inks2d/math\";\n *\n * const g = new Engine(500, 500);\n *\n * class Main extends Scene {\n * \tconstructor() {\n * \t\tsuper();\n * \t}\n *\n *\tstart(e: Engine) {\n * \t\tsuper.start(e);\n *\n * \t\tconst box = new Rectangle();\n * \t\tbox.position = new Point(g.stage.width / 2, g.stage.height / 2);\n * \t\tg.stage.addChild(box);\n * \t}\n * }\n *\n * g.scene = new Main();\n * g.start();\n *\n * ```\n *\n * @category inks2d\n */\nexport class Stage extends DisplayObject {\n\tprivate readonly _graphics: CanvasRenderingContext2D;\n\n\tconstructor(canvas: HTMLCanvasElement, width: number, height: number) {\n\t\tsuper();\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis._graphics = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\t}\n\n\t/**\n\t * Graphics object where drawing commands can occur.\n\t */\n\tget graphics(): CanvasRenderingContext2D {\n\t\treturn this._graphics;\n\t}\n\n\tprivate updateChildren(children: DisplayObject[]): void {\n\t\tfor (let i = children.length - 1; i >= 0; i--) {\n\t\t\tconst child = children[i];\n\n\t\t\tchild.update && child.update();\n\n\t\t\tif (child.children && child.children.length > 0) {\n\t\t\t\tthis.updateChildren(child.children);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n\n\toverride update(): void {\n\t\tthis.updateChildren(this.children);\n\t}\n}\n","import {\n\tEC_BUTTONS,\n\tEC_DRAGGABLE_SPRITES,\n\tEC_PARTICLES,\n\tEC_SHAKING_SPRITES,\n} from \"./EngineConstants\";\nimport { type Engine } from \"./Engine\";\nimport { Stage } from \"./Stage\";\n\n/**\n *\n * The game scene that holds the main active DisplayObject, the {@link Stage | game stage}. Useful for organization, eg. \"Menu\", \"Level1\", \"Start Screen\", etc.\n *\n * ```ts\n * import { Engine, Scene } from \"inks2d\";\n *\n * const g = new Engine(500, 500);\n *\n * class Main extends Scene {\n * \tconstructor(){\n * \t\tsuper();\n * \t}\n *\n * \tstart(e: Engine) {\n * \t\tsuper.start(e);\n * \t}\n * }\n *\n * g.scene = new Main();\n * g.start();\n * ```\n *\n * @category inks2d\n */\nexport class Scene {\n\tprivate _engine?: Engine;\n\tprivate readonly _helpers: Record<string, any> = {};\n\n\t/**\n\t * Override this. Called after Scene has been added to the Engine.\n\t *\n\t * @param engine The game engine current instance.\n\t */\n\tstart(engine: Engine): void {\n\t\tconst viewportSize = engine.getViewportSize();\n\t\tthis._engine = engine;\n\t\tthis._helpers.stage = new Stage(\n\t\t\tthis._engine.canvas,\n\t\t\tviewportSize.width,\n\t\t\tviewportSize.height,\n\t\t);\n\t}\n\n\t/**\n\t * Returns the scene stage.\n\t */\n\tget stage(): Stage {\n\t\treturn this._helpers.stage as Stage;\n\t}\n\n\t/**\n\t * Override this. Updates the game, updating the Scene and display objects.\n\t */\n\tupdate(): void {\n\t\tthis.stage.update();\n\t}\n\n\t/**\n\t * Override this. Called when Scene is changed, and the active Scene is no longer this.\n\t */\n\tdestroy(): void {\n\t\tEC_DRAGGABLE_SPRITES.length = 0;\n\t\tEC_BUTTONS.length = 0;\n\t\tEC_PARTICLES.length = 0;\n\t\tEC_SHAKING_SPRITES.length = 0;\n\t}\n}\n"]}