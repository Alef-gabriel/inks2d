{"version":3,"sources":["../src/effects/sfx/Sound.ts"],"names":["Sound","source","resolve","res","file","buffer","error","value","delayValue","feedbackValue","filterValue","duration","decay","reverse","attack","wait","length","impulse","left","right","i","frequencyValue","type","randomValue","oscillator","randomInt"],"mappings":"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","sourcesContent":["import { randomInt } from \"inks2d/math\";\n\n/**\n * Teste.\n */\nexport class Sound {\n\tprivate readonly _name: string;\n\n\tprivate readonly _actx: AudioContext = new AudioContext();\n\tprivate readonly _volumeNode: GainNode = this._actx.createGain();\n\tprivate readonly _panNode: StereoPannerNode = this._actx.createStereoPanner();\n\tprivate readonly _delayNode: DelayNode = this._actx.createDelay();\n\tprivate readonly _feedbackNode: GainNode = this._actx.createGain();\n\tprivate readonly _filterNode: BiquadFilterNode =\n\t\tthis._actx.createBiquadFilter();\n\n\tprivate readonly _convolverNode: ConvolverNode = this._actx.createConvolver();\n\tprivate readonly _oscillatorNode: OscillatorNode =\n\t\tthis._actx.createOscillator();\n\n\tprivate _buffer: AudioBuffer | null = null;\n\tprivate _reverbImpulse: AudioBuffer | null = null;\n\n\tprivate _startTime: number = 0;\n\tprivate _startOffset: number = 0;\n\tprivate _soundNode: AudioBufferSourceNode | null = null;\n\tprivate _echo: boolean = false;\n\tprivate _delayValue: number = 0.3;\n\tprivate _feedbackValue: number = 0.3;\n\tprivate _filterValue: number = 0;\n\tprivate _loop: boolean = false;\n\tprivate _playing: boolean = false;\n\tprivate readonly _volumeValue: number = 1;\n\n\tpublic reverb: boolean = false;\n\tpublic playbackRate: number = 1;\n\n\tconstructor(source: string) {\n\t\tthis._name = source;\n\t}\n\n\tget name(): string {\n\t\treturn this._name;\n\t}\n\n\tasync load(): Promise<any> {\n\t\treturn await new Promise((resolve) => {\n\t\t\tfetch(this._name).then((res) => {\n\t\t\t\tres.arrayBuffer().then((file) => {\n\t\t\t\t\tthis._actx.decodeAudioData(\n\t\t\t\t\t\tfile,\n\t\t\t\t\t\t(buffer) => {\n\t\t\t\t\t\t\tthis._buffer = buffer;\n\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t(error) => {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`Audio could not be decoded: ${JSON.stringify(error)}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tplay(): void {\n\t\tif (this._buffer == null) throw new Error(`Audio not loaded.`);\n\n\t\tthis._startTime = this._actx.currentTime;\n\t\tthis._soundNode = this._actx.createBufferSource();\n\t\tthis._soundNode.buffer = this._buffer;\n\n\t\tthis._soundNode.connect(this._volumeNode);\n\t\tthis._volumeNode.connect(this._panNode);\n\n\t\tif (!this.reverb) {\n\t\t\tthis._volumeNode.connect(this._panNode);\n\t\t} else {\n\t\t\tthis._volumeNode.connect(this._convolverNode);\n\t\t\tthis._convolverNode.connect(this._panNode);\n\t\t\tthis._convolverNode.buffer = this._reverbImpulse;\n\t\t}\n\n\t\tthis._panNode.connect(this._actx.destination);\n\n\t\tif (this._echo) {\n\t\t\tthis._feedbackNode.gain.value = this._feedbackValue;\n\t\t\tthis._delayNode.delayTime.value = this._delayValue;\n\t\t\tthis._filterNode.frequency.value = this._filterValue;\n\n\t\t\tthis._delayNode.connect(this._feedbackNode);\n\n\t\t\tif (this._filterValue > 0) {\n\t\t\t\tthis._feedbackNode.connect(this._filterNode);\n\t\t\t\tthis._filterNode.connect(this._delayNode);\n\t\t\t} else {\n\t\t\t\tthis._feedbackNode.connect(this._delayNode);\n\t\t\t}\n\n\t\t\tthis._volumeNode.connect(this._delayNode);\n\t\t\tthis._delayNode.connect(this._panNode);\n\t\t}\n\n\t\tthis._soundNode.loop = this._loop;\n\t\tthis._soundNode.playbackRate.value = this.playbackRate;\n\t\tthis._soundNode.start(\n\t\t\tthis._startTime,\n\t\t\tthis._startOffset % this._buffer.duration,\n\t\t);\n\n\t\tthis._playing = true;\n\t}\n\n\tpause(): void {\n\t\tif (!this._playing) return;\n\n\t\tthis._soundNode?.stop(this._actx.currentTime);\n\t\tthis._startOffset += this._actx.currentTime - this._startTime;\n\t\tthis._playing = false;\n\t}\n\n\tstop(): void {\n\t\tthis._soundNode?.stop(this._actx.currentTime);\n\t\tthis._playing = false;\n\t}\n\n\trestart(): void {\n\t\tif (this._playing) this._soundNode?.stop(this._actx.currentTime);\n\n\t\tthis._startOffset = 0;\n\t\tthis.play();\n\t}\n\n\tplayFrom(value: number): void {\n\t\tif (this._playing) {\n\t\t\tthis._soundNode?.stop(this._actx.currentTime);\n\t\t}\n\n\t\tthis._startOffset = value;\n\t\tthis.play();\n\t}\n\n\tsetEcho(\n\t\tdelayValue: number = 0.3,\n\t\tfeedbackValue: number = 0.3,\n\t\tfilterValue: number = 0,\n\t): void {\n\t\tthis._delayValue = delayValue;\n\t\tthis._feedbackValue = feedbackValue;\n\t\tthis._filterValue = filterValue;\n\t\tthis._echo = true;\n\t}\n\n\tsetReverb(\n\t\tduration: number = 2,\n\t\tdecay: number = 2,\n\t\treverse: boolean = false,\n\t): void {\n\t\tthis._reverbImpulse = this.impulseResponse(duration, decay, reverse);\n\t\tthis.reverb = true;\n\t}\n\n\tfadeIn(attack: number, wait: number = 0): void {\n\t\tthis.volume = 0;\n\t\tthis.volumeNode.gain.linearRampToValueAtTime(\n\t\t\t0,\n\t\t\tthis._actx.currentTime + wait,\n\t\t);\n\t\tthis.volumeNode.gain.linearRampToValueAtTime(\n\t\t\tthis.volume,\n\t\t\tthis._actx.currentTime + wait + attack,\n\t\t);\n\t}\n\n\tfadeOut(decay: number, wait: number = 0): void {\n\t\tthis.volumeNode.gain.linearRampToValueAtTime(\n\t\t\tthis.volume,\n\t\t\tthis._actx.currentTime + wait,\n\t\t);\n\t\tthis.volumeNode.gain.linearRampToValueAtTime(\n\t\t\t0,\n\t\t\tthis._actx.currentTime + wait + decay,\n\t\t);\n\t}\n\n\tprivate impulseResponse(\n\t\tduration: number = 2,\n\t\tdecay: number = 2,\n\t\treverse: boolean = false,\n\t): AudioBuffer {\n\t\tconst length = this._actx.sampleRate * duration;\n\t\tconst impulse = this._actx.createBuffer(2, length, this._actx.sampleRate);\n\n\t\tconst left = impulse.getChannelData(0);\n\t\tconst right = impulse.getChannelData(1);\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tlet n;\n\t\t\tif (reverse) {\n\t\t\t\tn = length - i;\n\t\t\t} else {\n\t\t\t\tn = i;\n\t\t\t}\n\n\t\t\tleft[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\n\t\t\tright[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);\n\t\t}\n\n\t\treturn impulse;\n\t}\n\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\n\tset loop(value: boolean) {\n\t\tthis._loop = value;\n\t}\n\n\tget volume(): number {\n\t\treturn this._volumeValue;\n\t}\n\n\tset volume(value: number) {\n\t\tthis._volumeNode.gain.value = value;\n\t}\n\n\tget pan(): number {\n\t\treturn this._panNode.pan.value;\n\t}\n\n\tset pan(value: number) {\n\t\tthis._panNode.pan.value = value;\n\t}\n\n\tget playing(): boolean {\n\t\treturn this._playing;\n\t}\n\n\tget oscillatorNode(): OscillatorNode {\n\t\treturn this._oscillatorNode;\n\t}\n\n\tget volumeNode(): GainNode {\n\t\treturn this._volumeNode;\n\t}\n\n\tget panNode(): StereoPannerNode {\n\t\treturn this._panNode;\n\t}\n\n\tget audioContextDestination(): AudioDestinationNode {\n\t\treturn this._actx.destination;\n\t}\n\n\tpublic playSfx(\n\t\tfrequencyValue: number,\n\t\t// attack: number = 0,\n\t\t// decay: number = 1,\n\t\ttype: \"sine\" | \"triangle\" | \"square\" | \"sawtooth\" = \"sine\",\n\t\twait: number = 0,\n\t\t// pitchBendAmount: number = 0,\n\t\t// reverse: boolean = false,\n\t\trandomValue: number = 0,\n\t\t// dissonance: number = 0,\n\t\t// echo: number[] | undefined = undefined,\n\t\t// reverb: number[] | undefined = undefined,\n\t): void {\n\t\tconst oscillator = this._actx.createOscillator();\n\n\t\toscillator.connect(this._volumeNode);\n\t\tthis._volumeNode.connect(this._panNode);\n\t\tthis._panNode.connect(this._actx.destination);\n\t\toscillator.type = type;\n\n\t\tif (randomValue > 0) {\n\t\t\tfrequencyValue = randomInt(\n\t\t\t\tfrequencyValue - randomValue / 2,\n\t\t\t\tfrequencyValue + randomValue / 2,\n\t\t\t);\n\t\t}\n\n\t\toscillator.frequency.value = frequencyValue;\n\t\toscillator.start(this._actx.currentTime + wait);\n\t}\n}\n"]}